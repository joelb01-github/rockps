{"version":3,"sources":["web3/web3.js","contracts/rockps.js","App.js","serviceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","rockps","eth","Contract","constant","inputs","name","type","outputs","payable","stateMutability","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","index","input","setState","defineProperty","target","value","handleValue","state","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","accounts","choice","players","playerCount","canBeFinalised","wrap","_context","prev","next","preventDefault","t0","objectSpread","status","abrupt","getAccounts","sent","input0","input1","methods","enterAndInput","send","from","addr","stop","_x","_x2","apply","arguments","onClikFinal","_callee2","last","_context2","finaliseGame","latestWinner","bind","assertThisInitialized","parseInt","getPlayerCount","getPlayers","playerAddr","getLastest","push","_this2","Player","react_default","createElement","className","onSubmit","onChange","messageAlice","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kaAOeA,EAFF,WAAIC,GAAKC,OAAOF,KAAKG,iBCwEnBC,EAAA,IAAIJ,EAAKK,IAAIC,SA1EG,CAC9B,CACCC,UAAY,EACZC,OAAU,CACT,CACCC,KAAQ,SACRC,KAAQ,UAGVD,KAAQ,gBACRE,QAAW,GACXC,SAAW,EACXC,gBAAmB,aACnBH,KAAQ,YAET,CACCH,UAAY,EACZC,OAAU,GACVC,KAAQ,eACRE,QAAW,GACXC,SAAW,EACXC,gBAAmB,aACnBH,KAAQ,YAET,CACCF,OAAU,GACVI,SAAW,EACXC,gBAAmB,aACnBH,KAAQ,eAET,CACCH,UAAY,EACZC,OAAU,GACVC,KAAQ,iBACRE,QAAW,CACV,CACCF,KAAQ,GACRC,KAAQ,YAGVE,SAAW,EACXC,gBAAmB,OACnBH,KAAQ,YAET,CACCH,UAAY,EACZC,OAAU,GACVC,KAAQ,aACRE,QAAW,CACV,CACCF,KAAQ,GACRC,KAAQ,cAGVE,SAAW,EACXC,gBAAmB,OACnBH,KAAQ,YAET,CACCH,UAAY,EACZC,OAAU,GACVC,KAAQ,eACRE,QAAW,CACV,CACCF,KAAQ,GACRC,KAAQ,YAGVE,SAAW,EACXC,gBAAmB,OACnBH,KAAQ,aAvEmB,8CCqKdI,cAjKb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA8CRQ,aAAe,SAACC,EAAOC,GACrB,IAAMC,EAAQ,QAAUD,EACxBT,EAAKW,SAALV,OAAAW,EAAA,EAAAX,CAAA,GACGS,EAAQF,EAAMK,OAAOC,SAlDPd,EAsDnBe,YAAc,SAACN,GACb,IAAMC,EAAQ,QAAUD,EACxB,OAAOT,EAAKgB,MAAMN,IAxDDV,EA2DnBiB,aA3DmB,eAAAC,EAAAjB,OAAAkB,EAAA,EAAAlB,CAAAmB,EAAAC,EAAAC,KA2DJ,SAAAC,EAAOd,EAAOD,GAAd,IAAAgB,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAC,EAAAQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACbxB,EAAMyB,iBADOH,EAAAI,GAENzB,EAFMqB,EAAAE,KAGN,IAHMF,EAAAI,GAAA,EAWN,IAXMJ,EAAAI,GAAA,wBAITlC,EAAKW,SAAS,CACZe,QAAS,CAACzB,OAAAkC,EAAA,EAAAlC,CAAA,GACJD,EAAKgB,MAAMU,QAAQ,GADhB,CACoBU,OAAQ,2BACnCpC,EAAKgB,MAAMU,QAAQ,MAPdI,EAAAO,OAAA,yBAYTrC,EAAKW,SAAS,CACZe,QAAS,CACP1B,EAAKgB,MAAMU,QAAQ,GADZzB,OAAAkC,EAAA,EAAAlC,CAAA,GAEHD,EAAKgB,MAAMU,QAAQ,GAFhB,CAEoBU,OAAQ,8BAf9BN,EAAAO,OAAA,yBAAAP,EAAAE,KAAA,GAqBUhD,EAAKK,IAAIiD,cArBnB,eAqBPd,EArBOM,EAAAS,KAsBPd,EAAkB,IAARhB,EAAaT,EAAKgB,MAAMwB,OAASxC,EAAKgB,MAAMyB,OAtB/CX,EAAAE,KAAA,GAuBP5C,EAAOsD,QAAQC,cAAclB,GAAQmB,KAAK,CAAEC,KAAMrB,EAAS,KAvBpD,QAyBPE,EAAmB,IAARjB,EACb,CAAE,CAACqC,KAAMtB,EAAS,GAAIY,OAAQ,qBAC9BpC,EAAKgB,MAAMU,QAAQ,IACnB,CAAC1B,EAAKgB,MAAMU,QAAQ,GACpB,CAACoB,KAAMtB,EAAS,GAAIY,OAAQ,sBAC1BT,EAAc3B,EAAKgB,MAAMW,YAAc,EACvCC,EAAgC,IAAdD,EAAmB,MAAQ,KAEnD3B,EAAKW,SAAS,CAAEe,UAASC,cAAaC,mBAjCzB,yBAAAE,EAAAiB,SAAAxB,EAAApB,SA3DI,gBAAA6C,EAAAC,GAAA,OAAA/B,EAAAgC,MAAA/C,KAAAgD,YAAA,GAAAnD,EA+FnBoD,YA/FmBnD,OAAAkB,EAAA,EAAAlB,CAAAmB,EAAAC,EAAAC,KA+FL,SAAA+B,IAAA,IAAA7B,EAAA8B,EAAA,OAAAlC,EAAAC,EAAAQ,KAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,cAAAuB,EAAAvB,KAAA,EACWhD,EAAKK,IAAIiD,cADpB,cACNd,EADM+B,EAAAhB,KAEZvC,EAAKW,SAAS,CAAEiB,eAAgB,wBAFpB2B,EAAAvB,KAAA,EAGN5C,EAAOsD,QAAQc,eAAeZ,KAAK,CAAEC,KAAMrB,EAAS,KAH9C,cAAA+B,EAAAvB,KAAA,EAIO5C,EAAOsD,QAAQe,eAAenD,OAJrC,OAINgD,EAJMC,EAAAhB,KAKZvC,EAAKW,SAAS,CACZe,QAAS,CACP,CAAEoB,KAAM,MAAOV,OAAO,sBACtB,CAAEU,KAAM,MAAOV,OAAO,uBACxBT,YAAa,EACbC,eAAgB,QAChBY,QAAS,EACTC,QAAS,EACTa,KAAMA,IAbI,yBAAAC,EAAAR,SAAAM,EAAAlD,SA7FZH,EAAKgB,MAAQ,CACXU,QAAS,CACP,CAAEoB,KAAM,aAAcV,OAAQ,cAC9B,CAAEU,KAAM,aAAcV,OAAQ,eAChCT,YAAa,EACbC,eAAgB,aAChBY,QAAS,EACTC,QAAS,EACTa,KAAM,cAGRtD,EAAKO,aAAeP,EAAKO,aAAamD,KAAlBzD,OAAA0D,EAAA,EAAA1D,QAAA0D,EAAA,EAAA1D,CAAAD,KACpBA,EAAKiB,aAAejB,EAAKiB,aAAayC,KAAlBzD,OAAA0D,EAAA,EAAA1D,QAAA0D,EAAA,EAAA1D,CAAAD,KAdHA,uNAmBG4D,kBAAexE,EAAOsD,QAAQmB,iBAAiBvD,iCAA7DqB,0BACmBvC,EAAOsD,QAAQoB,aAAaxD,qBAA/CyD,mBACmB3E,EAAOsD,QAAQe,eAAenD,eAAjD0D,SAEAV,EAAqB,+CAAbU,EACV,sBACAA,EACEtC,EAAU,QACTC,SACA,YAGA,YAIA,oCANHD,EAAQuC,KAAK,CAAEnB,KAAM,MAAOV,OAAO,uBAA+BV,EAAQuC,KAAK,CAAEnB,KAAM,MAAOV,OAAO,2DAGrGV,EAAQuC,KAAK,CAAEnB,KAAMiB,EAAW,GAAI3B,OAAO,uBAC3CV,EAAQuC,KAAK,CAAEnB,KAAM,MAAOV,OAAO,2DAGnCV,EAAQuC,KAAK,CAAEnB,KAAMiB,EAAW,GAAI3B,OAAO,uBAC3CV,EAAQuC,KAAK,CAAEnB,KAAMiB,EAAW,GAAI3B,OAAO,oDAIzCR,EAAkC,IAAhBD,EAAqB,MAAQ,KAGrDxB,KAAKQ,SAAS,CAAEe,UAASC,cAAaC,iBAAgB0B,6IAmE/C,IAAAY,EAAA/D,KAsBDgE,EAAS,SAACpE,GACd,OACEqE,EAAA/C,EAAAgD,cAAA,WACED,EAAA/C,EAAAgD,cAAA,UAAKtE,EAAMN,KAAX,UACA2E,EAAA/C,EAAAgD,cAAA,SAAItE,EAAMN,KAAV,aAAyB2E,EAAA/C,EAAAgD,cAAA,QAAMC,UAAU,MAAMJ,EAAKlD,MAAMU,QAAQ3B,EAAMU,OAAO2B,SAC/EgC,EAAA/C,EAAAgD,cAAA,2BAAkBD,EAAA/C,EAAAgD,cAAA,QAAMC,UAAU,MAAMJ,EAAKlD,MAAMU,QAAQ3B,EAAMU,OAAOqC,OACxEsB,EAAA/C,EAAAgD,cAAA,QAAME,SAAU,SAAC/D,GAAD,OAAW0D,EAAKjD,aAAalB,EAAMU,MAAOD,KACxD4D,EAAA/C,EAAAgD,cAAA,sCACAD,EAAA/C,EAAAgD,cAAA,SAAO3E,KAAK,OAAOoB,MAAOoD,EAAKnD,YAAYhB,EAAMU,OAAQ+D,SAAU,SAAChE,GAAD,OAAW0D,EAAK3D,aAAaC,EAAOT,EAAMU,UAC7G2D,EAAA/C,EAAAgD,cAAA,8BAEFD,EAAA/C,EAAAgD,cAAA,UAAKH,EAAKlD,MAAMyD,gBAKtB,OACEL,EAAA/C,EAAAgD,cAAA,OAAKC,UAAU,OACbF,EAAA/C,EAAAgD,cAtCW,WACb,OACED,EAAA/C,EAAAgD,cAAA,WACED,EAAA/C,EAAAgD,cAAA,qCACAD,EAAA/C,EAAAgD,cAAA,WACED,EAAA/C,EAAAgD,cAAA,sFACAD,EAAA/C,EAAAgD,cAAA,iIAEFD,EAAA/C,EAAAgD,cAAA,WACED,EAAA/C,EAAAgD,cAAA,yBACAD,EAAA/C,EAAAgD,cAAA,sBAAaD,EAAA/C,EAAAgD,cAAA,QAAMC,UAAU,MAAMJ,EAAKlD,MAAMW,aAA9C,yCACAyC,EAAA/C,EAAAgD,cAAA,+CAAsCD,EAAA/C,EAAAgD,cAAA,QAAMC,UAAU,MAAMJ,EAAKlD,MAAMY,iBACvEwC,EAAA/C,EAAAgD,cAAA,2BAAkBD,EAAA/C,EAAAgD,cAAA,QAAMC,UAAU,MAAMJ,EAAKlD,MAAMsC,OACnDc,EAAA/C,EAAAgD,cAAA,UAAQK,QAASR,EAAKd,aAAtB,iBAEFgB,EAAA/C,EAAAgD,cAAA,6BAuBF,MACAD,EAAA/C,EAAAgD,cAACF,EAAD,CAAQ1E,KAAK,QAAQgB,MAAO,IAC5B2D,EAAA/C,EAAAgD,cAACF,EAAD,CAAQ1E,KAAK,MAAMgB,MAAO,YA3JhBkE,aCQEC,QACW,cAA7B1F,OAAO2F,SAASC,UAEe,UAA7B5F,OAAO2F,SAASC,UAEhB5F,OAAO2F,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAA/C,EAAAgD,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c0ea225c.chunk.js","sourcesContent":["// configuration of web3\nimport Web3 from 'web3';\n\n// hijacking the provider from metamask instance of web3\n// this provider has been configured to access the Rinkeby network but also has access to my accounts\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;","import web3 from '../web3/web3';\n\nexport const rockpsAddress = '0x4d33bbdaafd478beae4ec7fc8d590c2a99c70c5b';\nexport const rockpsInterface = [\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"choice\",\n\t\t\t\t\"type\": \"uint8\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"enterAndInput\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [],\n\t\t\"name\": \"finaliseGame\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"getPlayerCount\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"getPlayers\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address[]\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"latestWinner\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n];\n\nexport default new web3.eth.Contract(rockpsInterface, rockpsAddress);","import React, { Component } from 'react';\nimport './App.css';\nimport rockps from './contracts/rockps';\nimport web3 from './web3/web3';\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [\n        { addr: '...loading', status: '...loading'}, \n        { addr: '...loading', status: '...loading'} ],\n      playerCount: 0,\n      canBeFinalised: '...loading', // true if 2 players playing\n      input0: -1, // to check if problem here\n      input1: -1,\n      last: '...loading'\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n\n  async componentDidMount() {\n    const playerCount = parseInt(await rockps.methods.getPlayerCount().call());\n    const playerAddr = await rockps.methods.getPlayers().call();\n    const getLastest = await rockps.methods.latestWinner().call();\n\n    const last = (getLastest==='0x0000000000000000000000000000000000000000') \n      ? 'game not played yet'\n      : getLastest;\n    const players = [];\n    switch(playerCount) {\n      case 0:\n        players.push({ addr: 'N/A', status:'has not played yet'});        players.push({ addr: 'N/A', status:'has not played yet'});\n        break;\n      case 1:\n        players.push({ addr: playerAddr[0], status:'has already played'});\n        players.push({ addr: 'N/A', status:'has not played yet'});\n        break;\n      case 2:\n        players.push({ addr: playerAddr[0], status:'has already played'});\n        players.push({ addr: playerAddr[1], status:'has already played'});\n        break;\n      default:\n    };\n    const canBeFinalised = (playerCount === 2) ? 'Yes' : 'No';\n\n\n    this.setState({ players, playerCount, canBeFinalised, last });\n  }\n\n  handleChange = (event, index) => {\n    const input = 'input' + index;\n    this.setState({\n      [input]: event.target.value\n    });\n  }\n\n  handleValue = (index) => {\n    const input = 'input' + index;\n    return this.state[input];\n  };\n\n  handleSubmit = async (index, event) => {\n    event.preventDefault();\n    switch(index) {\n      case 0:\n        this.setState({ \n          players: [\n            {...this.state.players[0], status: 'Sending transaction...'}, \n            this.state.players[1] \n          ]\n        });\n        break;\n      case 1:\n        this.setState({ \n          players: [  \n            this.state.players[0],\n            {...this.state.players[1], status: 'Sending transaction...'},\n          ]\n        });\n        break;\n      default:\n    }\n    const accounts = await web3.eth.getAccounts();\n    const choice = (index===0) ? this.state.input0 : this.state.input1;\n    await rockps.methods.enterAndInput(choice).send({ from: accounts[0] });\n\n    const players = (index===0) \n      ? [ {addr: accounts[0], status: 'Transaction sent!'}, \n        this.state.players[1] ]\n      : [this.state.players[0],\n        {addr: accounts[0], status: 'Transaction sent!'}, ] ;\n    const playerCount = this.state.playerCount + 1;\n    const canBeFinalised = (playerCount===2) ? 'Yes' : 'No'\n\n    this.setState({ players, playerCount, canBeFinalised });\n  };\n\n  onClikFinal = async () => {\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ canBeFinalised: 'Fetching winner... '});\n    await rockps.methods.finaliseGame().send({ from: accounts[0] });\n    const last = await rockps.methods.latestWinner().call();\n    this.setState({ \n      players: [\n        { addr: 'N/A', status:'has not played yet'}, \n        { addr: 'N/A', status:'has not played yet'} ],\n      playerCount: 0,\n      canBeFinalised: '...No',\n      input0: -1, \n      input1: -1,\n      last: last });\n  }\n\n  render() {\n\n    const Header = () => {\n      return(\n        <div>\n          <h1>Rock Paper Scissor Game</h1>\n          <div>\n            <p>Choose for both Alice and Bob (one after the other) what they should play</p>\n            <p>When the 2 players have sent their choice (button 'Send choice'), you can finalise the game (button 'Check winner')</p>\n          </div>\n          <div>\n            <h2>Game status</h2>\n            <p>Currently <span className='js'>{this.state.playerCount}</span> players have submitted their choice.</p>\n            <p>Is the game ready to be finalised? <span className='js'>{this.state.canBeFinalised}</span></p>\n            <p>Latest winner: <span className='js'>{this.state.last}</span></p>\n            <button onClick={this.onClikFinal}>Check winner</button>\n          </div>\n          <h2>Let's play...</h2>\n        </div>\n      );\n    }\n\n    const Player = (props) => {\n      return(\n        <div>\n          <h4>{props.name}' side</h4>\n          <p>{props.name}' status: <span className='js'>{this.state.players[props.index].status}</span></p>\n          <p>Contract used: <span className='js'>{this.state.players[props.index].addr}</span></p>\n          <form onSubmit={(event) => this.handleSubmit(props.index, event)}>\n            <label>Pick player's choice </label>\n            <input type='text' value={this.handleValue(props.index)} onChange={(event) => this.handleChange(event, props.index)}></input>\n            <button>Send choice</button>\n          </form>\n          <h2>{this.state.messageAlice}</h2>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <Player name='Alice' index={0}/>\n        <Player name='Bob' index={1}/>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}