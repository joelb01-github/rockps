{"version":3,"sources":["redux/actionTypes.js","redux/status.js","components/PlayerFormComponent.js","components/PlayerComponent.js","web3/web3.js","contracts/rockps.js","components/GameStatusComponent.js","components/HeaderComponent.js","components/LoadingComponent.js","components/MainComponent.js","web3/utils.js","redux/actionCreators.js","redux/statusReducer.js","redux/playersReducer.js","redux/rootReducer.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["FINALISE_GAME_REQUEST","RESET_GAME_REQUEST","FETCH_PLAYERS_REQUEST","PLAYERS_FAILED","UPDATE_PLAYERS","UPDATE_PLAYER","UPDATE_PLAYER_ACT","UPDATE_PLAYER_PL2","FETCH_STATUS_REQUEST","STATUS_FAILED","UPDATE_STATUS","UPDATE_STATUS_COUNT","UPDATE_STATUS_FINALISED","UPDATE_STATUS_ACT","SUBMIT_COMMIT_REQUEST","REVEAL_COMMIT_REQUEST","REVEAL_COMMIT_FAILED","ST1","NOT_COMMITTED","COMMITTED","ST2","NOT_REVEALED","REVEALED","PENDING","ACT","SENDING","SENT","NONE","RESET","FINAL","WINNER","NEUTRAL","NOT_PLAYED","DRAW","NA","PlayerForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeChoice","event","index","setState","choices","target","value","state","handleChangeNounce","nounces","handleChoice","handleNounce","handleSubmit","preventDefault","type","submitCommit","player","revealCommit","bind","assertThisInitialized","_this2","react_default","a","createElement","Form","onSubmit","FormGroup","Label","for","Input","id","name","onChange","placeholder","act","Status","Fragment","Button","Component","connect","dispatch","choice","nounce","ActionTypes","payload","Player","Card","CardHeader","tag","CardBody","_ref2","status1","PlayerFormComponent","CardText","addr","_ref3","status2","pl2status1","CardFooter","className","_ref","web3","Web3","window","currentProvider","rockpsAddress","rockps","eth","Contract","constant","inputs","outputs","payable","stateMutability","GameStatus","handleFinalSubmit","finaliseGame","handleReset","resetGame","fetchGameStatus","Finalise","players","color","onClick","Reset","gameIsLoading","gameErrMsg","playersErrMsg","status","last","playerCount","playersIsLoading","gameStatus","Intro","Instructions","Header","Jumbotron","HeaderComponent_Intro","GameStatusComponent","HeaderComponent_Instructions","Loading","Main","fetchPlayers","HeaderComponent","LoadingComponent_Loading","PlayerComponent","asyncToGenerator","regenerator_default","mark","_callee","playerAddr","hasRevealed","wrap","_context","prev","next","t0","parseInt","methods","getPlayerCount","t1","sent","getPlayers","t2","push","abrupt","getRevealed","stop","apply","arguments","_callee2","accounts","commit","_context2","getAccounts","utils","soliditySha3","console","log","enterCommitment","send","from","_x","_callee3","_context3","reveal","_x2","fetchStatus","_ref4","_callee4","getLastest","gameCount","canBeFinalised","_context4","latestWinner","t3","length","resetPlayers","resetStatus","_ref5","_callee5","_context5","_ref6","_callee6","_context6","watchFinaliseGame","watchResetGame","watchRevealCommit","watchSubmitCommit","watchFetchPlayers","watchFetchGameStatus","rootSaga","takeEvery","_marked","put","message","_marked2","_marked3","_marked4","_marked5","action","objectSpread","_marked6","_context7","_marked7","index2","_context8","_marked8","_context9","_marked9","_context10","_marked10","_context11","_marked11","_context12","_marked12","_context13","all","_marked13","subPlayers","rootReducer","combineReducers","undefined","store","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","logger","run","configureStore","App","es","MainComponent","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2cAAaA,EAAwB,wBAIxBC,EAAqB,qBAIrBC,EAAwB,wBACxBC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAgB,gBAChBC,EAAoB,oBAIpBC,EAAoB,oBAEpBC,EAAuB,uBACvBC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAsB,sBACtBC,EAA0B,0BAC1BC,EAAoB,oBAEpBC,EAAwB,wBAIxBC,EAAwB,wBAExBC,EAAuB,uBC7BvBC,EAAM,CACjBC,cAAe,oCACfC,UAAW,+BAGAC,EAAM,CACjBC,aAAc,sCACdC,SAAU,8BACVC,QAAS,mCAGEC,EAAM,CACjBC,QAAS,yBACTC,KAAM,oBACNC,KAAM,GACNC,MAAO,wBACPC,MAAO,0BAGIC,EAAS,CACpBC,QAAS,6CACTH,MAAO,aACPI,WAAY,sBACZC,KAAM,QAKKC,EAAK,MCHZC,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaRQ,mBAAqB,SAACC,GACE,IAArBR,EAAKD,MAAMU,MACRT,EAAKU,SAAS,CAAEC,QAAS,CAACH,EAAMI,OAAOC,MAAOb,EAAKc,MAAMH,QAAQ,MACjEX,EAAKU,SAAS,CAAEC,QAAS,CAACX,EAAKc,MAAMH,QAAQ,GAAIH,EAAMI,OAAOC,UAjBjDb,EAoBnBe,mBAAqB,SAACP,GACE,IAArBR,EAAKD,MAAMU,MACRT,EAAKU,SAAS,CAAEM,QAAS,CAACR,EAAMI,OAAOC,MAAOb,EAAKc,MAAME,QAAQ,MACjEhB,EAAKU,SAAS,CAAEM,QAAS,CAAChB,EAAKc,MAAME,QAAQ,GAAIR,EAAMI,OAAOC,UAvBjDb,EA0BnBiB,aAAe,SAACR,GAAY,OAAOT,EAAKc,MAAMH,QAAQF,IA1BnCT,EA2BnBkB,aAAe,SAACT,GAAY,OAAOT,EAAKc,MAAME,QAAQP,IA3BnCT,EA6BnBmB,aAAe,SAACX,GACdA,EAAMY,iBACe,WAApBpB,EAAKD,MAAMsB,KACRrB,EAAKD,MAAMuB,aACXtB,EAAKD,MAAMU,MACXT,EAAKc,MAAMH,QAAQX,EAAKD,MAAMU,OAC9BT,EAAKc,MAAME,QAAQhB,EAAKD,MAAMU,OAC9BT,EAAKD,MAAMwB,QACXvB,EAAKD,MAAMyB,aACXxB,EAAKD,MAAMU,MACXT,EAAKc,MAAMH,QAAQX,EAAKD,MAAMU,OAC9BT,EAAKc,MAAME,QAAQhB,EAAKD,MAAMU,OAC9BT,EAAKD,MAAMwB,QAEO,IAArBvB,EAAKD,MAAMU,MACRT,EAAKU,SAAS,CAAEM,QAAS,CAAC,GAAIhB,EAAKc,MAAME,QAAQ,MACjDhB,EAAKU,SAAS,CAAEM,QAAS,CAAChB,EAAKc,MAAME,QAAQ,GAAI,OA3CrDhB,EAAKc,MAAQ,CACXH,QAAS,CAAC,EAAG,GACbK,QAAS,CAAC,EAAG,IAGfhB,EAAKO,mBAAqBP,EAAKO,mBAAmBkB,KAAxBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KAC1BA,EAAKe,mBAAqBf,EAAKe,mBAAmBU,KAAxBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KAC1BA,EAAKiB,aAAejB,EAAKiB,aAAaQ,KAAlBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACpBA,EAAKkB,aAAelB,EAAKkB,aAAaO,KAAlBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACpBA,EAAKmB,aAAenB,EAAKmB,aAAaM,KAAlBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KAXHA,wEAgDV,IAAA2B,EAAAxB,KAWP,OACEyB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,SAAU,SAACxB,GAAD,OAAWmB,EAAKR,aAAaX,KAC3CoB,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,IAAI,UAAX,iBACAP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOf,KAAK,SAASgB,GAAG,SAASC,KAAK,SACtCzB,MAAOV,KAAKc,aAAad,KAAKJ,MAAMU,OACpC8B,SAAU,SAAC/B,GAAD,OAAWmB,EAAKpB,mBAAmBC,KAC3CoB,EAAAC,EAAAC,cAAA,UAAQjB,MAAM,KAAd,QACAe,EAAAC,EAAAC,cAAA,UAAQjB,MAAM,KAAd,SACAe,EAAAC,EAAAC,cAAA,UAAQjB,MAAM,KAAd,YAEFe,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,IAAI,UAAX,wBACAP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOf,KAAK,OAAOgB,GAAG,SAASC,KAAK,SACpCzB,MAAOV,KAAKe,aAAaf,KAAKJ,MAAMU,OACpC8B,SAAU,SAAC/B,GAAD,OAAWmB,EAAKZ,mBAAmBP,IAC7CgC,YAAY,wBAGdZ,EAAAC,EAAAC,cA3BW,WACb,OAAGH,EAAK5B,MAAMwB,OAAOkB,MAAQC,EAAWtD,QAC9BwC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,MAGCf,EAAAC,EAAAC,cAACc,EAAA,EAAD,gBAsBT,cA/EiBC,aAsFVC,cAAQ,KA3GI,SAAAC,GACzB,MAAO,CACLzB,aAAc,SAACb,EAAOuC,EAAQC,EAAQ1B,GAAxB,OAAmCwB,EAAS,CACxD1B,KAAM6B,EACNC,QAAS,CACP1C,MAAOA,EACPuC,OAAQA,EACRC,OAAQA,EACR1B,OAAQA,MAEZC,aAAc,SAACf,EAAOuC,EAAQC,EAAQ1B,GAAxB,OAAmCwB,EAAS,CACxD1B,KAAM6B,EACNC,QAAS,CACP1C,MAAOA,EACPuC,OAAQA,EACRC,OAAQA,EACR1B,OAAQA,QA2FDuB,CAAkChD,GC9BlCsD,EA9EA,SAACrD,GAmDd,OACE6B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAYC,IAAI,MAAMxD,EAAMuC,MAC5BV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAYC,IAAI,MAAhB,mBACA3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAhDO,SAAA2B,GAAuB,IAApBhD,EAAoBgD,EAApBhD,MAAOc,EAAakC,EAAblC,OACvB,OAAIA,EAAOmC,UAAYhB,EAAW7D,cAE9B+C,EAAAC,EAAAC,cAAC6B,EAAD,CACElD,MAAOA,EACPY,KAAM,SACNE,OAAQA,IAKVK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,KACEf,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KAAWrC,EAAOmC,SAClB9B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,uBAA0BrC,EAAOsC,QAmCjC,CACEpD,MAAOV,EAAMU,MACbc,OAAQxB,EAAMwB,WAGpBK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAYC,IAAI,MAAhB,mBACA3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cArCO,SAAAgC,GAAuB,IAApBrD,EAAoBqD,EAApBrD,MAAOc,EAAauC,EAAbvC,OACvB,OAAKA,EAAOmC,UAAYhB,EAAW5D,WAChCyC,EAAOwC,UAAYrB,EAAW1D,cAC9BuC,EAAOyC,aAAetB,EAAW5D,UAEhC8C,EAAAC,EAAAC,cAAC6B,EAAD,CACElD,MAAOA,EACPY,KAAM,SACNE,OAAQA,IAGLA,EAAOyC,aAAetB,EAAW7D,cAEtC+C,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KAAWlB,EAAWxD,SAKtB0C,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KAAWrC,EAAOwC,UAmBhB,CACEtD,MAAOV,EAAMU,MACbc,OAAQxB,EAAMwB,WAGpBK,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAYC,UAAU,cACpBtC,EAAAC,EAAAC,cArEa,SAAAqC,GAAgB,IAAb5C,EAAa4C,EAAb5C,OACpB,OAAIA,EAAOkB,MAAQC,EAAWpD,KAClBsC,EAAAC,EAAAC,cAAA,QAAMoC,UAAU,UAAhB,IAA2B3C,EAAOkB,IAAlC,KAEGb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,WAiEX,CAAYpB,OAAQxB,EAAMwB,8BCrEnB6C,EAFF,WAAIC,GAAKC,OAAOF,KAAKG,iBCHrBC,EAAgB,6CAwMdC,EAAA,IAAIL,EAAKM,IAAIC,SAvMG,CAC9B,CACCC,UAAY,EACZC,OAAU,GACVvC,KAAQ,eACRwC,QAAW,CACV,CACCxC,KAAQ,GACRjB,KAAQ,YAGV0D,SAAW,EACXC,gBAAmB,OACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,GACVvC,KAAQ,SACRwC,QAAW,CACV,CACCxC,KAAQ,GACRjB,KAAQ,YAGV0D,SAAW,EACXC,gBAAmB,OACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,CACT,CACCvC,KAAQ,SACRjB,KAAQ,YAGViB,KAAQ,kBACRwC,QAAW,GACXC,SAAW,EACXC,gBAAmB,UACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,GACVvC,KAAQ,YACRwC,QAAW,CACV,CACCxC,KAAQ,GACRjB,KAAQ,UAGV0D,SAAW,EACXC,gBAAmB,OACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,GACVvC,KAAQ,eACRwC,QAAW,GACXC,SAAW,EACXC,gBAAmB,aACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,GACVvC,KAAQ,aACRwC,QAAW,CACV,CACCxC,KAAQ,GACRjB,KAAQ,cAGV0D,SAAW,EACXC,gBAAmB,OACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,CACT,CACCvC,KAAQ,SACRjB,KAAQ,WAET,CACCiB,KAAQ,SACRjB,KAAQ,YAGViB,KAAQ,SACRwC,QAAW,GACXC,SAAW,EACXC,gBAAmB,aACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,GACVvC,KAAQ,cACRwC,QAAW,CACV,CACCxC,KAAQ,GACRjB,KAAQ,YAGV0D,SAAW,EACXC,gBAAmB,OACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,CACT,CACCvC,KAAQ,SACRjB,KAAQ,WAET,CACCiB,KAAQ,SACRjB,KAAQ,YAGViB,KAAQ,cACRwC,QAAW,CACV,CACCxC,KAAQ,GACRjB,KAAQ,YAGV0D,SAAW,EACXC,gBAAmB,OACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,GACVvC,KAAQ,YACRwC,QAAW,GACXC,SAAW,EACXC,gBAAmB,aACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,GACVvC,KAAQ,iBACRwC,QAAW,CACV,CACCxC,KAAQ,GACRjB,KAAQ,YAGV0D,SAAW,EACXC,gBAAmB,OACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,CACT,CACCvC,KAAQ,YACRjB,KAAQ,YAGViB,KAAQ,eACRwC,QAAW,CACV,CACCxC,KAAQ,GACRjB,KAAQ,SAGV0D,SAAW,EACXC,gBAAmB,OACnB3D,KAAQ,YAET,CACCuD,UAAY,EACZC,OAAU,GACVvC,KAAQ,gBACRwC,QAAW,CACV,CACCxC,KAAQ,GACRjB,KAAQ,YAGV0D,SAAW,EACXC,gBAAmB,OACnB3D,KAAQ,YAET,CACCwD,OAAU,GACVE,SAAW,EACXC,gBAAmB,aACnB3D,KAAQ,gBAI4CmD,GChLhDS,8MAGJC,kBAAoB,kBAAMlF,EAAKD,MAAMoF,kBACrCC,YAAc,kBAAMpF,EAAKD,MAAMsF,gGAFTlF,KAAKJ,MAAMuF,mDAIxB,IAAA3D,EAAAxB,KAEDoF,EAAW,WACf,OAAI5D,EAAK5B,MAAMyF,QAAQ,GAAGzB,UAAYrB,EAAWzD,UAC5C0C,EAAK5B,MAAMyF,QAAQ,GAAGzB,UAAYrB,EAAWzD,SAE9C2C,EAAAC,EAAAC,cAAA,KAAGoC,UAAU,QACXtC,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQ6C,MAAM,UAAUC,QAAS,kBAAM/D,EAAKuD,sBAA5C,gBADF,KAIWtD,EAAAC,EAAAC,cAAA,aAGX6D,EAAQ,WACZ,OACE/D,EAAAC,EAAAC,cAAA,KAAGoC,UAAU,QACXtC,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQ6C,MAAM,UAAUC,QAAS,kBAAM/D,EAAKyD,gBAA5C,cADF,MAiBJ,OAAIjF,KAAKJ,MAAM6F,cAEXhE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,KAAGoC,UAAU,UAAb,2BAEFtC,EAAAC,EAAAC,cAAA,MAAIoC,UAAU,UAKX/D,KAAKJ,MAAM8F,WAEhBjE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,KAAGoC,UAAU,UAAU/D,KAAKJ,MAAM8F,YAClCjE,EAAAC,EAAAC,cAAA,KAAGoC,UAAU,UAAb,2DAEFtC,EAAAC,EAAAC,cAAA,MAAIoC,UAAU,UAKX/D,KAAKJ,MAAM+F,cACTlE,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAAA,KAAGoC,UAAU,UAAb,YAAN,KAKPtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,6CAAqC0C,GACrC5C,EAAAC,EAAAC,cAAA,8BAAsB3B,KAAKJ,MAAMgG,OAAOC,MACxCpE,EAAAC,EAAAC,cAAA,sBAAc3B,KAAKJ,MAAMgG,OAAOE,YAAhC,yCACArE,EAAAC,EAAAC,cAjDS,WACf,OAAIH,EAAK5B,MAAMmG,iBACJtE,EAAAC,EAAAC,cAAA,KAAGoC,UAAU,UAAb,6BAEFvC,EAAK5B,MAAMgG,OAAOtD,MAAQC,EAAWpD,KACpCsC,EAAAC,EAAAC,cAAA,KAAGoC,UAAU,UAAUvC,EAAK5B,MAAMgG,OAAOtD,KAGxCb,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAACyD,EAAD,MAAN,IAAmB3D,EAAAC,EAAAC,cAAC6D,EAAD,MAAnB,MAyCL,OAEF/D,EAAAC,EAAAC,cAAA,MAAIoC,UAAU,iBA7ECrB,aAoFVC,eAvGS,SAAAhC,GACtB,MAAO,CACLiF,OAAQjF,EAAMqF,WAAWJ,OACzBH,cAAe9E,EAAMqF,WAAWP,cAChCC,WAAY/E,EAAMqF,WAAWN,WAC7BL,QAAS1E,EAAM0E,QAAQA,QACvBU,iBAAkBpF,EAAM0E,QAAQU,iBAChCJ,cAAehF,EAAM0E,QAAQM,gBAIN,SAAA/C,GACzB,MAAO,CACLoC,aAAc,kBAAMpC,EAAS,CAAE1B,KAAM6B,KACrCmC,UAAW,kBAAMtC,EAAS,CAAE1B,KAAM6B,KAClCoC,gBAAiB,kBAAMvC,EAAS,CAAE1B,KAAM6B,OAwF7BJ,CAA6CmC,IChGtDmB,GAAQ,WACZ,OACExE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIoC,UAAU,aAAd,sBACAtC,EAAAC,EAAAC,cAAA,MAAIoC,UAAU,WAKdmC,GAAe,WACnB,OACEzE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,qEACAF,EAAAC,EAAAC,cAAA,4CAKSwE,GA7BA,WACb,OACE1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,KACE3E,EAAAC,EAAAC,cAAC0E,GAAD,MACA5E,EAAAC,EAAAC,cAAC2E,GAAD,MACA7E,EAAAC,EAAAC,cAAC4E,GAAD,QCPOC,GAAU,WACrB,OACE/E,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,UACbtC,EAAAC,EAAAC,cAAA,QAAMoC,UAAU,oDAEhBtC,EAAAC,EAAAC,cAAA,KAAGoC,UAAU,UAAb,mBCcA0C,+LAGFzG,KAAKJ,MAAM8G,gDAGJ,IAAA7G,EAAAG,KAuCP,OACEyB,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,aACbtC,EAAAC,EAAAC,cAACgF,GAAD,MACAlF,EAAAC,EAAAC,cAxCY,WAEd,OAAI9B,EAAKD,MAAMmG,iBAEXtE,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,aACbtC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,OACbtC,EAAAC,EAAAC,cAACiF,GAAD,QAMC/G,EAAKD,MAAM+F,cAEhBlE,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,aACbtC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,OACbtC,EAAAC,EAAAC,cAAA,MAAIoC,UAAU,UAAUlE,EAAKD,MAAM+F,eACnClE,EAAAC,EAAAC,cAAA,sFAQJF,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,8BACbtC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,0BACbtC,EAAAC,EAAAC,cAACkF,EAAD,CAAQ1E,KAAK,QAAQ7B,MAAO,EAAGc,OAAQvB,EAAKD,MAAMyF,QAAQ,MAE5D5D,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,0BACbtC,EAAAC,EAAAC,cAACkF,EAAD,CAAQ1E,KAAK,MAAM7B,MAAO,EAAGc,OAAQvB,EAAKD,MAAMyF,QAAQ,QAU9D,cAhDW3C,aAsDJC,eApES,SAAAhC,GACtB,MAAO,CACL0E,QAAS1E,EAAM0E,QAAQA,QACvBU,iBAAkBpF,EAAM0E,QAAQU,iBAChCJ,cAAehF,EAAM0E,QAAQM,gBAIL,SAAA/C,GAC1B,MAAO,CACL8D,aAAc,kBAAM9D,EAAS,CAAE1B,KAAM6B,OA0D1BJ,CAA8C8D,oECvEhDC,GAAY,eAAA1C,EAAAlE,OAAAgH,GAAA,EAAAhH,CAAAiH,GAAArF,EAAAsF,KAAG,SAAAC,IAAA,IAAAnB,EAAAoB,EAAA7B,EAAA8B,EAAA,OAAAJ,GAAArF,EAAA0F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,GACNC,SADMJ,EAAAE,KAAA,EACSjD,EAAOoD,QAAQC,iBAAiBxH,OADzC,cAAAkH,EAAAO,GAAAP,EAAAQ,KACpB/B,GADoB,EAAAuB,EAAAG,IAAAH,EAAAO,IAAAP,EAAAE,KAAA,EAEDjD,EAAOoD,QAAQI,aAAa3H,OAF3B,OAEpB+G,EAFoBG,EAAAQ,KAIpBxC,EAAU,GAJUgC,EAAAU,GAKnBjC,EALmBuB,EAAAE,KAMnB,IANmBF,EAAAU,GAAA,GAgBnB,IAhBmBV,EAAAU,GAAA,GAoBnB,IApBmBV,EAAAU,GAAA,2BAOtB1C,EAAQ2C,KAAK,CACXtE,KAAMnB,EACNgB,QAAShB,EAAW7D,cACpBmF,WAAYtB,EAAW7D,cACvBkF,QAASrB,EAAW1D,aACpByD,IAAKC,EAAWpD,OAElBkG,EAAQ2C,KAAK,CAAEtE,KAAMnB,EAAWgB,QAAShB,EAAW7D,cAAemF,WAAYtB,EAAW7D,cAAekF,QAASrB,EAAW1D,aAAcyD,IAAKC,EAAWpD,OAdrIkI,EAAAY,OAAA,2BAiBtB5C,EAAQ2C,KAAK,CAAEtE,KAAMwD,EAAW,GAAI3D,QAAShB,EAAW5D,UAAWkF,WAAYtB,EAAW7D,cAAekF,QAASrB,EAAW1D,aAAcyD,IAAKC,EAAWpD,OAC3JkG,EAAQ2C,KAAK,CAAEtE,KAAMnB,EAAWgB,QAAShB,EAAW7D,cAAemF,WAAYtB,EAAW5D,UAAWiF,QAASrB,EAAW1D,aAAcyD,IAAKC,EAAWpD,OAlBjIkI,EAAAY,OAAA,2BAAAZ,EAAAE,KAAA,GAqBIjD,EAAOoD,QAAQQ,cAAc/H,OArBjC,eAqBhBgH,EArBgBE,EAAAQ,MAsBN,IAAMV,EAAY,IAChC9B,EAAQ2C,KAAK,CAAEtE,KAAMwD,EAAW,GAAI3D,QAAShB,EAAW5D,UAAWkF,WAAYtB,EAAW5D,UAAWiF,QAASrB,EAAWzD,SAAUwD,IAAKC,EAAWpD,OACnJkG,EAAQ2C,KAAK,CAAEtE,KAAMwD,EAAW,GAAI3D,QAAShB,EAAW5D,UAAWkF,WAAYtB,EAAW5D,UAAWiF,QAASrB,EAAWzD,SAAUwD,IAAKC,EAAWpD,QAE3IgI,EAAY,IAAOA,EAAY,GAKnCA,EAAY,IACd9B,EAAQ2C,KAAK,CAAEtE,KAAMwD,EAAW,GAAI3D,QAAShB,EAAW5D,UAAWkF,WAAYtB,EAAW5D,UAAWiF,QAASrB,EAAWzD,SAAUwD,IAAKC,EAAWpD,OACnJkG,EAAQ2C,KAAK,CAAEtE,KAAMwD,EAAW,GAAI3D,QAAShB,EAAW5D,UAAWkF,WAAYtB,EAAW5D,UAAWiF,QAASrB,EAAW1D,aAAcyD,IAAKC,EAAWpD,SAGvJkG,EAAQ2C,KAAK,CAAEtE,KAAMwD,EAAW,GAAI3D,QAAShB,EAAW5D,UAAWkF,WAAYtB,EAAW5D,UAAWiF,QAASrB,EAAW1D,aAAcyD,IAAKC,EAAWpD,OACvJkG,EAAQ2C,KAAK,CAAEtE,KAAMwD,EAAW,GAAI3D,QAAShB,EAAW5D,UAAWkF,WAAYtB,EAAW5D,UAAWiF,QAASrB,EAAWzD,SAAUwD,IAAKC,EAAWpD,SAVrJkG,EAAQ2C,KAAK,CAAEtE,KAAMwD,EAAW,GAAI3D,QAAShB,EAAW5D,UAAWkF,WAAYtB,EAAW5D,UAAWiF,QAASrB,EAAW1D,aAAcyD,IAAKC,EAAWpD,OACvJkG,EAAQ2C,KAAK,CAAEtE,KAAMwD,EAAW,GAAI3D,QAAShB,EAAW5D,UAAWkF,WAAYtB,EAAW5D,UAAWiF,QAASrB,EAAW1D,aAAcyD,IAAKC,EAAWpD,QA5BnIkI,EAAAY,OAAA,2BAAAZ,EAAAY,OAAA,SA2CnB5C,GA3CmB,yBAAAgC,EAAAc,SAAAlB,EAAAjH,SAAH,yBAAAgE,EAAAoE,MAAApI,KAAAqI,YAAA,GA8CZlH,GAAY,eAAAmC,EAAAxD,OAAAgH,GAAA,EAAAhH,CAAAiH,GAAArF,EAAAsF,KAAG,SAAAsB,EAAOtF,GAAP,IAAAuF,EAAA1F,EAAAC,EAAA0F,EAAA,OAAAzB,GAAArF,EAAA0F,KAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,cAAAkB,EAAAlB,KAAA,EACHtD,EAAKM,IAAImE,cADN,cACpBH,EADoBE,EAAAZ,KAEpBhF,EAASG,EAAQH,OACjBC,EAASE,EAAQF,OAEjB0F,EAASvE,EAAK0E,MAAMC,aAAa/F,EAAQC,GAE/C+F,QAAQC,IAAI,WAAYjG,EAAQ,YAAaC,GAPnB2F,EAAAlB,KAAA,EAQpBjD,EAAOoD,QAAQqB,gBAAgBP,GAAQQ,KAAK,CAChDC,KAAMV,EAAS,GACf7H,MAAO,MAViB,cAAA+H,EAAAR,OAAA,SAanBM,EAAS,IAbU,yBAAAE,EAAAN,SAAAG,EAAAtI,SAAH,gBAAAkJ,GAAA,OAAA5F,EAAA8E,MAAApI,KAAAqI,YAAA,GAgBZhH,GAAY,eAAAsC,EAAA7D,OAAAgH,GAAA,EAAAhH,CAAAiH,GAAArF,EAAAsF,KAAG,SAAAmC,EAAOnG,GAAP,IAAAuF,EAAA1F,EAAAC,EAAA,OAAAiE,GAAArF,EAAA0F,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cAAA6B,EAAA7B,KAAA,EACHtD,EAAKM,IAAImE,cADN,cACpBH,EADoBa,EAAAvB,KAEpBhF,EAASG,EAAQH,OACjBC,EAASE,EAAQF,OAHGsG,EAAA7B,KAAA,EAKpBjD,EAAOoD,QAAQ2B,OAAOxG,EAAOC,GAAQkG,KAAK,CAAEC,KAAMV,EAAS,KALvC,wBAAAa,EAAAjB,SAAAgB,EAAAnJ,SAAH,gBAAAsJ,GAAA,OAAA3F,EAAAyE,MAAApI,KAAAqI,YAAA,GAQZkB,GAAW,eAAAC,EAAA1J,OAAAgH,GAAA,EAAAhH,CAAAiH,GAAArF,EAAAsF,KAAG,SAAAyC,IAAA,IAAAC,EAAAC,EAAA9D,EAAAC,EAAA8D,EAAAzC,EAAA,OAAAJ,GAAArF,EAAA0F,KAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAtC,KAAA,EAEAjD,EAAOoD,QAAQoC,eAAe3J,OAF9B,cAEnBuJ,EAFmBG,EAAAhC,KAAAgC,EAAArC,GAGTC,SAHSoC,EAAAtC,KAAA,EAGMjD,EAAOoD,QAAQiC,YAAYxJ,OAHjC,cAAA0J,EAAAjC,GAAAiC,EAAAhC,KAGrB8B,GAHqB,EAAAE,EAAArC,IAAAqC,EAAAjC,IAIrB/B,EAAOtD,EAAc/C,WACP,IAAdmK,IACF9D,EAAQ6D,IAAenH,EAAchD,QACjCgD,EAAc9C,KACdiK,GARmBG,EAAA9B,GAWLN,SAXKoC,EAAAtC,KAAA,GAWUjD,EAAOoD,QAAQC,iBAAiBxH,OAX1C,eAAA0J,EAAAE,GAAAF,EAAAhC,KAWnB/B,GAXmB,EAAA+D,EAAA9B,IAAA8B,EAAAE,IAarBH,GAAiB,EAbIC,EAAAtC,KAAA,GAcAjD,EAAOoD,QAAQI,aAAa3H,OAd5B,WAeC,IAfD0J,EAAAhC,KAeVmC,OAfU,CAAAH,EAAAtC,KAAA,gBAAAsC,EAAAtC,KAAA,GAgBGjD,EAAOoD,QAAQQ,cAAc/H,OAhBhC,SAgBjBgH,EAhBiB0C,EAAAhC,MAiBP,IAAMV,EAAY,KAChCyC,GAAiB,GAlBI,eAAAC,EAAA5B,OAAA,SAsBlB,CACL2B,eAAgBA,EAChB9D,YAAaA,EACbD,KAAMA,EACNvD,IAAKC,EAAWpD,OA1BO,yBAAA0K,EAAA1B,SAAAsB,EAAAzJ,SAAH,yBAAAwJ,EAAApB,MAAApI,KAAAqI,YAAA,GA8BX4B,GAAe,WAC1B,MAAO,CACL,CAAEvG,KAAMnB,EACNgB,QAAShB,EAAW7D,cACpBmF,WAAYtB,EAAW7D,cACvBkF,QAASrB,EAAW1D,aACpByD,IAAKC,EAAWpD,MAClB,CAAEuE,KAAMnB,EACNgB,QAAShB,EAAW7D,cACpBmF,WAAYtB,EAAW7D,cACvBkF,QAASrB,EAAW1D,aACpByD,IAAKC,EAAWpD,QAIT+K,GAAc,SAACrE,GAC1B,MAAQ,CACNC,YAAa,EACb8D,eT7Fc,KS8Fd/D,KAAMA,EACNvD,IAAKC,EAAWpD,OAIPyK,GAAiB,aAIjB5E,GAAY,eAAAmF,EAAArK,OAAAgH,GAAA,EAAAhH,CAAAiH,GAAArF,EAAAsF,KAAG,SAAAoD,IAAA,IAAA7B,EAAA1C,EAAA,OAAAkB,GAAArF,EAAA0F,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cAAA8C,EAAA9C,KAAA,EACHtD,EAAKM,IAAImE,cADN,cACpBH,EADoB8B,EAAAxC,KAAAwC,EAAA9C,KAAA,EAEpBjD,EAAOoD,QAAQ1C,eAAegE,KAAK,CAAEC,KAAMV,EAAS,KAFhC,cAAA8B,EAAA9C,KAAA,EAIPjD,EAAOoD,QAAQoC,eAAe3J,OAJvB,cAIpB0F,EAJoBwE,EAAAxC,KAAAwC,EAAApC,OAAA,SAKlBpC,IAAStD,EAAchD,QAC3BgD,EAAc9C,KACdoG,GAPsB,wBAAAwE,EAAAlC,SAAAiC,EAAApK,SAAH,yBAAAmK,EAAA/B,MAAApI,KAAAqI,YAAA,GAUZnD,GAAS,eAAAoF,EAAAxK,OAAAgH,GAAA,EAAAhH,CAAAiH,GAAArF,EAAAsF,KAAG,SAAAuD,IAAA,IAAAhC,EAAA,OAAAxB,GAAArF,EAAA0F,KAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,cAAAiD,EAAAjD,KAAA,EACAtD,EAAKM,IAAImE,cADT,cACjBH,EADiBiC,EAAA3C,KAAA2C,EAAAjD,KAAA,EAEjBjD,EAAOoD,QAAQxC,YAAY8D,KAAK,CAAEC,KAAMV,EAAS,KAFhC,wBAAAiC,EAAArC,SAAAoC,EAAAvK,SAAH,yBAAAsK,EAAAlC,MAAApI,KAAAqI,YAAA,gBCvIZoC,iBAIOzF,iBA0BP0F,iBAIOxF,iBAyBPyF,iBAIOtJ,iBAqCPuJ,iBAIOzJ,iBAwCP0J,iBAIOnE,iBAYPoE,iBAIO3F,iBAYA4F,IAhLjB,SAAUN,KAAV,OAAA1D,GAAArF,EAAA0F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACE,OADFF,EAAAE,KAAA,EACQyD,aAAUjI,EAAmCiC,IADrD,wBAAAqC,EAAAc,SAAA8C,GAAAjL,MAIO,SAAUgF,KAAV,IAAAa,EAAAD,EAAAP,EAAA,OAAA0B,GAAArF,EAAA0F,KAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,OAEH,OAFGkB,EAAAnB,KAAA,EAAAmB,EAAAlB,KAAA,EAEG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAST,EAAWlD,QAJnB,OAMU,OANVoJ,EAAAlB,KAAA,EAMgBpH,aAAKwI,IANrB,OAQH,OAFM9C,EANH4C,EAAAZ,KAOGjC,EAAS+C,GAAkB9C,GAP9B4C,EAAAlB,KAAA,EAQG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAS4C,IAVR,OAcH,OADMP,EAAUsD,KAbbF,EAAAlB,KAAA,GAcG2D,aAAI,CACRhK,KAAM6B,EACNC,QAASqC,IAhBR,QAAAoD,EAAAlB,KAAA,iBAoBH,OApBGkB,EAAAnB,KAAA,GAAAmB,EAAAjB,GAAAiB,EAAA,SAAAA,EAAAlB,KAAA,GAoBG2D,aAAI,CAAEhK,KAAM6B,EAA2BC,QAASyF,EAAAjB,GAAM2D,UApBzD,yBAAA1C,EAAAN,SAAAiD,GAAApL,KAAA,UA0BP,SAAU0K,KAAV,OAAA3D,GAAArF,EAAA0F,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OACE,OADF6B,EAAA7B,KAAA,EACQyD,aAAUjI,EAAgCmC,IADlD,wBAAAkE,EAAAjB,SAAAkD,GAAArL,MAIO,SAAUkF,KAAV,IAAAU,EAAAP,EAAA,OAAA0B,GAAArF,EAAA0F,KAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,OAEH,OAFGsC,EAAAvC,KAAA,EAAAuC,EAAAtC,KAAA,EAEG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAST,EAAWnD,QAJnB,OAMH,OANGyK,EAAAtC,KAAA,EAMGpH,aAAKwI,IANR,OAQH,OADM/C,EAAS+C,GAAkBpG,EAAcnD,OAP5CyK,EAAAtC,KAAA,EAQG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAS4C,IAVR,OAaH,OADMP,EAAUsD,KAZbkB,EAAAtC,KAAA,GAaG2D,aAAI,CACRhK,KAAM6B,EACNC,QAASqC,IAfR,QAAAwE,EAAAtC,KAAA,iBAkBH,OAlBGsC,EAAAvC,KAAA,GAAAuC,EAAArC,GAAAqC,EAAA,SAAAA,EAAAtC,KAAA,GAkBG2D,aAAI,CAAEhK,KAAM6B,EAA2BC,QAAS6G,EAAArC,GAAM2D,UAlBzD,yBAAAtB,EAAA1B,SAAAmD,GAAAtL,KAAA,UAyBP,SAAU2K,KAAV,OAAA5D,GAAArF,EAAA0F,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,OACE,OADF8C,EAAA9C,KAAA,EACQyD,aAAUjI,EAAmC1B,IADrD,wBAAAgJ,EAAAlC,SAAAoD,GAAAvL,MAIO,SAAUqB,GAAamK,GAAvB,IAAA5F,EAAAgE,EAAA,OAAA7C,GAAArF,EAAA0F,KAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,OAEH,OAFGiD,EAAAlD,KAAA,EAAAkD,EAAAjD,KAAA,EAEG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAS,CACP1C,MAAOkL,EAAOxI,QAAQ1C,MACtBgC,IAAKC,EAAWtD,WANjB,OASH,OATGuL,EAAAjD,KAAA,EASGpH,aAAKwI,GAAoB6C,EAAOxI,SATnC,OAeH,OALM4C,EAVH9F,OAAA2L,GAAA,EAAA3L,CAAA,GAWE0L,EAAOxI,QAAQ5B,OAXjB,CAYDkB,IAAKC,EAAWrD,KAChB0E,QAASrB,EAAWzD,WAbnB0L,EAAAjD,KAAA,EAeG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAS,CACP1C,MAAOkL,EAAOxI,QAAQ1C,MACtBsF,OAAQA,KAnBT,OAwBH,OADMgE,EAAiBjB,KAvBpB6B,EAAAjD,KAAA,GAwBG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAS4G,IA1BR,QAAAY,EAAAjD,KAAA,iBA+BH,OA/BGiD,EAAAlD,KAAA,GAAAkD,EAAAhD,GAAAgD,EAAA,SAAAA,EAAAjD,KAAA,GA+BG2D,aAAI,CAAEhK,KAAM6B,EAAkCC,QAASwH,EAAAhD,GAAM2D,UA/BhE,yBAAAX,EAAArC,SAAAuD,GAAA1L,KAAA,UAqCP,SAAU4K,KAAV,OAAA7D,GAAArF,EAAA0F,KAAA,SAAAuE,GAAA,cAAAA,EAAArE,KAAAqE,EAAApE,MAAA,OACE,OADFoE,EAAApE,KAAA,EACQyD,aAAUjI,EAAmC5B,IADrD,wBAAAwK,EAAAxD,SAAAyD,GAAA5L,MAIO,SAAUmB,GAAaqK,GAAvB,IAAA9H,EAAAkC,EAAAiG,EAAA,OAAA9E,GAAArF,EAAA0F,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,OAEH,OAFGuE,EAAAxE,KAAA,EAAAwE,EAAAvE,KAAA,EAEG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAS,CACP1C,MAAOkL,EAAOxI,QAAQ1C,MACtBgC,IAAKC,EAAWtD,WANjB,OASU,OATV6M,EAAAvE,KAAA,EASgBpH,aAAKwI,GAAoB6C,EAAOxI,SAThD,OAgBH,OAPMU,EATHoI,EAAAjE,KAUGjC,EAVH9F,OAAA2L,GAAA,EAAA3L,CAAA,GAWE0L,EAAOxI,QAAQ5B,OAXjB,CAYDsC,KAAMA,EACNpB,IAAKC,EAAWrD,KAChBqE,QAAShB,EAAW5D,YAdnBmN,EAAAvE,KAAA,EAgBG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAS,CACP1C,MAAOkL,EAAOxI,QAAQ1C,MACtBsF,OAAQA,KApBT,OAwBH,OADMiG,EAAiC,IAAvBL,EAAOxI,QAAQ1C,MAAa,EAAI,EAvB7CwL,EAAAvE,KAAA,GAwBG2D,aAAI,CACRhK,KAAM6B,EACNC,QAAS,CACP1C,MAAOuL,EACPjG,OAAQrD,EAAW5D,aA5BpB,QA+BH,OA/BGmN,EAAAvE,KAAA,GA+BG2D,aAAI,CAAEhK,KAAM6B,IA/Bf,QAAA+I,EAAAvE,KAAA,iBAiCH,OAjCGuE,EAAAxE,KAAA,GAAAwE,EAAAtE,GAAAsE,EAAA,SAAAA,EAAAvE,KAAA,GAiCG2D,aAAI,CAAEhK,KAAM6B,EAA4BC,QAAS8I,EAAAtE,GAAM2D,UAjC1D,yBAAAW,EAAA3D,SAAA4D,GAAA/L,KAAA,UAwCP,SAAU6K,KAAV,OAAA9D,GAAArF,EAAA0F,KAAA,SAAA4E,GAAA,cAAAA,EAAA1E,KAAA0E,EAAAzE,MAAA,OACE,OADFyE,EAAAzE,KAAA,EACQyD,aAAUjI,EAAmC2D,IADrD,wBAAAsF,EAAA7D,SAAA8D,GAAAjM,MAIO,SAAU0G,KAAV,IAAArB,EAAA,OAAA0B,GAAArF,EAAA0F,KAAA,SAAA8E,GAAA,cAAAA,EAAA5E,KAAA4E,EAAA3E,MAAA,OAEa,OAFb2E,EAAA5E,KAAA,EAAA4E,EAAA3E,KAAA,EAEmBpH,aAAKwI,IAFxB,OAGH,OADMtD,EAFH6G,EAAArE,KAAAqE,EAAA3E,KAAA,EAGG2D,aAAI,CAAEhK,KAAM6B,EAA4BC,QAASqC,IAHpD,OAAA6G,EAAA3E,KAAA,gBAKH,OALG2E,EAAA5E,KAAA,EAAA4E,EAAA1E,GAAA0E,EAAA,SAAAA,EAAA3E,KAAA,GAKG2D,aAAI,CAAEhK,KAAM6B,EAA4BC,QAASkJ,EAAA1E,GAAM2D,UAL1D,yBAAAe,EAAA/D,SAAAgE,GAAAnM,KAAA,SAYP,SAAU8K,KAAV,OAAA/D,GAAArF,EAAA0F,KAAA,SAAAgF,GAAA,cAAAA,EAAA9E,KAAA8E,EAAA7E,MAAA,OACE,OADF6E,EAAA7E,KAAA,EACQyD,aAAUjI,EAAkCoC,IADpD,wBAAAiH,EAAAjE,SAAAkE,GAAArM,MAIO,SAAUmF,KAAV,IAAAa,EAAA,OAAAe,GAAArF,EAAA0F,KAAA,SAAAkF,GAAA,cAAAA,EAAAhF,KAAAgF,EAAA/E,MAAA,OAEgB,OAFhB+E,EAAAhF,KAAA,EAAAgF,EAAA/E,KAAA,EAEsBpH,aAAKwI,IAF3B,OAGH,OADM3C,EAFHsG,EAAAzE,KAAAyE,EAAA/E,KAAA,EAGG2D,aAAI,CAAEhK,KAAM6B,EAA2BC,QAASgD,IAHnD,OAAAsG,EAAA/E,KAAA,gBAKH,OALG+E,EAAAhF,KAAA,EAAAgF,EAAA9E,GAAA8E,EAAA,SAAAA,EAAA/E,KAAA,GAKG2D,aAAI,CAAEhK,KAAM6B,EAA2BC,QAASsJ,EAAA9E,GAAM2D,UALzD,yBAAAmB,EAAAnE,SAAAoE,GAAAvM,KAAA,SAYA,SAAU+K,KAAV,OAAAhE,GAAArF,EAAA0F,KAAA,SAAAoF,GAAA,cAAAA,EAAAlF,KAAAkF,EAAAjF,MAAA,OACL,OADKiF,EAAAjF,KAAA,EACCkF,aAAI,CACRhC,KACAC,KACAG,KACAC,KACAF,KACAD,OAPG,wBAAA6B,EAAArE,SAAAuE,GAAA1M,MCrLA,IC2ED2M,GAAa,SAAChM,EAAO6K,GACzB,OAAOA,EAAOtK,MAEZ,KAAK6B,EACH,OAAOyI,EAAOxI,QAAQ1C,OACpB,KAAK,EACH,MAAO,CAACkL,EAAOxI,QAAQ4C,OAAQjF,EAAM,IACvC,KAAK,EACH,MAAO,CAACA,EAAM,GAAI6K,EAAOxI,QAAQ4C,QACnC,QACE,OAAOjF,EAGb,KAAKoC,EACH,OAAOyI,EAAOxI,QAAQ1C,OACpB,KAAK,EACH,MAAO,CAACR,OAAA2L,GAAA,EAAA3L,CAAA,GACFa,EAAM,GADL,CACS2B,IAAKkJ,EAAOxI,QAAQV,MAClC3B,EAAM,IAEV,KAAK,EACH,MAAO,CACLA,EAAM,GADDb,OAAA2L,GAAA,EAAA3L,CAAA,GAEDa,EAAM,GAFL,CAES2B,IAAKkJ,EAAOxI,QAAQV,OAEtC,KAAK,EACH,MAAO,CAACxC,OAAA2L,GAAA,EAAA3L,CAAA,GACFa,EAAM,GADL,CACS2B,IAAKkJ,EAAOxI,QAAQV,MAD7BxC,OAAA2L,GAAA,EAAA3L,CAAA,GAEDa,EAAM,GAFL,CAES2B,IAAKkJ,EAAOxI,QAAQV,OAEtC,QACE,OAAO3B,EAGb,IblG6B,oBamG3B,OAAO6K,EAAOxI,QAAQ1C,OACpB,KAAK,EACH,MAAO,CAACR,OAAA2L,GAAA,EAAA3L,CAAA,GACFa,EAAM,GADL,CACS4C,QAASiI,EAAOxI,QAAQO,UACtC5C,EAAM,IAEV,KAAK,EACH,MAAO,CACLA,EAAM,GADDb,OAAA2L,GAAA,EAAA3L,CAAA,GAEDa,EAAM,GAFL,CAES4C,QAASiI,EAAOxI,QAAQO,WAE1C,QACE,OAAO5C,EAGX,IbjH2B,oBakHzB,OAAO6K,EAAOxI,QAAQ1C,OACpB,KAAK,EACH,MAAO,CAACR,OAAA2L,GAAA,EAAA3L,CAAA,GACFa,EAAM,GADL,CACSiD,QAAS4H,EAAOxI,QAAQY,UACtCjD,EAAM,IAEV,KAAK,EACH,MAAO,CACLA,EAAM,GADDb,OAAA2L,GAAA,EAAA3L,CAAA,GAEDa,EAAM,GAFL,CAESiD,QAAS4H,EAAOxI,QAAQY,WAE1C,QACE,OAAOjD,EAGb,IbhI4B,qBaiI1B,OAAO6K,EAAOxI,QAAQ1C,OACpB,KAAK,EACH,MAAO,CAACR,OAAA2L,GAAA,EAAA3L,CAAA,GACFa,EAAM,GADL,CACS+C,KAAM8H,EAAOxI,QAAQU,OACnC/C,EAAM,IAEV,KAAK,EACH,MAAO,CACLA,EAAM,GADDb,OAAA2L,GAAA,EAAA3L,CAAA,GAEDa,EAAM,GAFL,CAES+C,KAAM8H,EAAOxI,QAAQU,QAEvC,QACE,OAAO/C,EAGb,KAAKoC,EACH,OAAOyI,EAAOxI,QAAQ1C,OACpB,KAAK,EACH,MAAO,CAACR,OAAA2L,GAAA,EAAA3L,CAAA,GACFa,EAAM,GADL,CACSkD,WAAY2H,EAAOxI,QAAQ4C,SACzCjF,EAAM,IAEV,KAAK,EACH,MAAO,CACLA,EAAM,GADDb,OAAA2L,GAAA,EAAA3L,CAAA,GAEDa,EAAM,GAFL,CAESkD,WAAY2H,EAAOxI,QAAQ4C,UAE7C,QACE,OAAOjF,EAGf,QACE,OAAOA,ICvKEiM,GALKC,aAAgB,CAClC7G,WFHwB,WAIZ,IAJarF,EAIb0H,UAAA2B,OAAA,QAAA8C,IAAAzE,UAAA,GAAAA,UAAA,GAJqB,CACjC5C,eAAe,EACfC,WAAY,KACZE,OAAQ,MACP4F,EAAWnD,UAAA2B,OAAA,EAAA3B,UAAA,QAAAyE,EACZ,OAAOtB,EAAOtK,MAEZ,KAAK6B,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACE8E,eAAe,EACfC,WAAY,KACZE,OAAQ,OAGZ,KAAK7C,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACE8E,eAAe,EACfC,WAAY,KACZE,OAAQ4F,EAAOxI,UAGnB,KAAKD,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACE8E,eAAe,EACfC,WAAY8F,EAAOxI,QACnB4C,OAAQ,OAGZ,KAAK7C,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACE8E,eAAe,EACfC,WAAY,KACZE,OAAO9F,OAAA2L,GAAA,EAAA3L,CAAA,GAAKa,EAAMiF,OAAZ,CACJE,YAAanF,EAAMiF,OAAOE,YAAY,MAG5C,KAAK/C,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACE8E,eAAe,EACfC,WAAY,KACZE,OAAO9F,OAAA2L,GAAA,EAAA3L,CAAA,GAAKa,EAAMiF,OAAZ,CACJgE,eAAgB4B,EAAOxI,YAG7B,KAAKD,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACE8E,eAAe,EACfC,WAAY,KACZE,OAAO9F,OAAA2L,GAAA,EAAA3L,CAAA,GAAKa,EAAMiF,OAAZ,CACJtD,IAAKkJ,EAAOxI,YAGlB,QACE,OAAOrC,IEjDX0E,QDJqB,WAIT,IAJU1E,EAIV0H,UAAA2B,OAAA,QAAA8C,IAAAzE,UAAA,GAAAA,UAAA,GAJkB,CAC9BtC,kBAAkB,EAClBJ,cAAe,KACfN,QAAS,IACRmG,EAAWnD,UAAA2B,OAAA,EAAA3B,UAAA,QAAAyE,EACZ,OAAOtB,EAAOtK,MAEZ,KAAK6B,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACEoF,kBAAkB,EAClBJ,cAAe,KACfN,QAAS,KAGb,KAAKtC,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACEoF,kBAAkB,EAClBJ,cAAe6F,EAAOxI,QACtBqC,QAAS,KAGb,KAAKtC,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACEoF,kBAAkB,EAClBJ,cAAe,KACfN,QAASmG,EAAOxI,UAGpB,KAAKD,EAOL,KAAKA,EAOL,Ib/B6B,oBasC7B,IbrC6B,oBa4C7B,Ib3C8B,qBakD9B,KAAKA,EACH,OAAOjD,OAAA2L,GAAA,EAAA3L,CAAA,GAAIa,EAAX,CACEoF,kBAAkB,EAClBJ,cAAe,KACfN,QAASsH,GAAWhM,EAAM0E,QAASmG,KAGvC,QACE,OAAO7K,2BElEPoM,WCDwB,WAE5B,IAAMC,EAAiBC,eAEjBF,EAAQG,aACZN,GACAO,aACEC,aACEC,KACAL,KAMN,OAFAA,EAAeM,IAAIvC,IAEZgC,EDdKQ,IAcCC,oLAVX,OACE/L,EAAAC,EAAAC,cAAC8L,EAAA,EAAD,CAAUV,MAAOA,IACftL,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,OACbtC,EAAAC,EAAAC,cAAC+L,GAAD,eALQhL,aEGEiL,QACW,cAA7BxJ,OAAOyJ,SAASC,UAEe,UAA7B1J,OAAOyJ,SAASC,UAEhB1J,OAAOyJ,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvM,EAAAC,EAAAC,cAACsM,GAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.738e3b03.chunk.js","sourcesContent":["export const FINALISE_GAME_REQUEST = 'FINALISE_GAME_REQUEST';\nexport const FINALISE_GAME_SUCCESS = 'FINALISE_GAME_SUCCESS';\nexport const FINALISE_GAME_FAILED = 'FINALISE_GAME_FAILED';\n\nexport const RESET_GAME_REQUEST = 'RESET_GAME_REQUEST';\nexport const RESET_GAME_SUCCESS = 'RESET_GAME_SUCCESS';\nexport const RESET_GAME_FAILED = 'RESET_GAME_FAILED';\n\nexport const FETCH_PLAYERS_REQUEST = 'FETCH_PLAYERS_REQUEST';\nexport const PLAYERS_FAILED = 'PLAYERS_FAILED';\nexport const UPDATE_PLAYERS = 'UPDATE_PLAYERS';\nexport const UPDATE_PLAYER = 'UPDATE_PLAYER';\nexport const UPDATE_PLAYER_ACT = 'UPDATE_PLAYER_ACT';\nexport const UPDATE_PLAYER_ST1 = 'UPDATE_PLAYER_ST1';\nexport const UPDATE_PLAYER_ST2 = 'UPDATE_PLAYER_ST2';\nexport const UPDATE_PLAYER_ADDR = 'UPDATE_PLAYER_ADDR';\nexport const UPDATE_PLAYER_PL2 = 'UPDATE_PLAYER_PL2';\n\nexport const FETCH_STATUS_REQUEST = 'FETCH_STATUS_REQUEST';\nexport const STATUS_FAILED = 'STATUS_FAILED';\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\nexport const UPDATE_STATUS_COUNT = 'UPDATE_STATUS_COUNT';\nexport const UPDATE_STATUS_FINALISED = 'UPDATE_STATUS_FINALISED';\nexport const UPDATE_STATUS_ACT = 'UPDATE_STATUS_ACT';\n\nexport const SUBMIT_COMMIT_REQUEST = 'SUBMIT_COMMIT_REQUEST';\nexport const SUBMIT_COMMIT_SUCCESS = 'SUBMIT_COMMIT_SUCCESS';\nexport const SUBMIT_COMMIT_FAILED = 'SUBMIT_COMMIT_FAILED';\n\nexport const REVEAL_COMMIT_REQUEST = 'REVEAL_COMMIT_REQUEST';\nexport const REVEAL_COMMIT_SUCCESS = 'REVEAL_COMMIT_SUCCESS';\nexport const REVEAL_COMMIT_FAILED = 'REVEAL_COMMIT_FAILED';","export const LOADING = '...loading';\n\nexport const ST1 = {\n  NOT_COMMITTED: 'Has not picked his/her choice yet',\n  COMMITTED: 'Has sent his/her commitment',\n};\n\nexport const ST2 = {\n  NOT_REVEALED: 'Has not revealed his/her choice yet',\n  REVEALED: 'Has revealed his/her choice',\n  PENDING: 'Waiting for the other player...',\n};\n\nexport const ACT = {\n  SENDING: 'Sending transaction...',\n  SENT: 'Transaction sent!',\n  NONE: '',\n  RESET: 'Resetting the game...',\n  FINAL: 'Finalising the game...'\n};\n\nexport const WINNER = {\n  NEUTRAL: '0x0000000000000000000000000000000000000000',\n  RESET: 'game reset',\n  NOT_PLAYED: 'game not played yet',\n  DRAW: 'draw'\n}\n\nexport const YES = 'Yes';\nexport const NO = 'No';\nexport const NA = 'N/A';\n\nexport const BOTH = 2;","import React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../redux/actionTypes';\nimport * as Status from '../redux/status';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitCommit: (index, choice, nounce, player) => dispatch({ \n      type: ActionTypes.SUBMIT_COMMIT_REQUEST, \n      payload: {\n        index: index,\n        choice: choice,\n        nounce: nounce,\n        player: player\n      }}),\n    revealCommit: (index, choice, nounce, player) => dispatch({ \n      type: ActionTypes.REVEAL_COMMIT_REQUEST, \n      payload: {\n        index: index,\n        choice: choice,\n        nounce: nounce,\n        player: player\n      }})\n  };\n};\n\nclass PlayerForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      choices: [0, 0],\n      nounces: [0, 0]\n    };\n\n    this.handleChangeChoice = this.handleChangeChoice.bind(this);\n    this.handleChangeNounce = this.handleChangeNounce.bind(this);\n    this.handleChoice = this.handleChoice.bind(this);\n    this.handleNounce = this.handleNounce.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  };\n\n  handleChangeChoice = (event) => {\n    (this.props.index === 0) \n      ? this.setState({ choices: [event.target.value, this.state.choices[1]] })\n      : this.setState({ choices: [this.state.choices[0], event.target.value] });\n  };\n\n  handleChangeNounce = (event) => { \n    (this.props.index === 0) \n      ? this.setState({ nounces: [event.target.value, this.state.nounces[1]] })\n      : this.setState({ nounces: [this.state.nounces[0], event.target.value] });\n  };\n\n  handleChoice = (index) => { return this.state.choices[index]; };\n  handleNounce = (index) => { return this.state.nounces[index]; };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    (this.props.type === 'commit')\n      ? this.props.submitCommit(\n        this.props.index,\n        this.state.choices[this.props.index],\n        this.state.nounces[this.props.index],\n        this.props.player)\n      : this.props.revealCommit(\n        this.props.index,\n        this.state.choices[this.props.index],\n        this.state.nounces[this.props.index],\n        this.props.player);\n\n    (this.props.index === 0) \n      ? this.setState({ nounces: ['', this.state.nounces[1]] })\n      : this.setState({ nounces: [this.state.nounces[0], ''] });\n  };\n\n  render() {\n\n    const Commit = () => {\n      if(this.props.player.act === Status.ACT.SENDING) {\n        return (<></>);\n      }\n      else {\n        return ( <Button>Commit</Button> );\n      }\n    }\n\n    return(\n      <Form onSubmit={(event) => this.handleSubmit(event)}>\n        <FormGroup>\n          <Label for=\"choice\">Pick a choice</Label>\n          <Input type=\"select\" id=\"choice\" name=\"choice\" \n          value={this.handleChoice(this.props.index)} \n          onChange={(event) => this.handleChangeChoice(event)}>\n            <option value=\"0\">Rock</option>\n            <option value=\"1\">Paper</option>\n            <option value=\"2\">Scissor</option>\n          </Input>\n          <Label for=\"nounce\">Pick a secret number</Label>\n          <Input type=\"text\" id=\"nounce\" name=\"nounce\" \n          value={this.handleNounce(this.props.index)} \n          onChange={(event) => this.handleChangeNounce(event)}\n          placeholder=\"your secret number\">\n          </Input>\n        </FormGroup>\n        <Commit />\n      </Form>\n    );\n  }\n\n}\n\nexport default connect(null, mapDispatchToProps)(PlayerForm);","import React from 'react';\nimport { Card, CardHeader, CardBody, CardText, CardFooter } from 'reactstrap';\nimport PlayerForm from './PlayerFormComponent';\nimport * as Status from '../redux/status';\n\nconst Player = (props) => {\n    \n  const ShowAction = ({ player }) => {\n    if (player.act !== Status.ACT.NONE ) {\n        return (<span className=\"action\"> {player.act} </span>);\n      }\n    else { return (<> </>); }\n  };\n\n  const Commit = ({ index, player }) => {\n    if (player.status1 === Status.ST1.NOT_COMMITTED) {\n      return ( \n        <PlayerForm \n          index={index} \n          type={'commit'}\n          player={player}/> \n      );\n    }\n    else {\n      return (\n        <>\n          <CardText>{player.status1}</CardText> \n          <CardText>Contract used: {player.addr}</CardText>\n        </>\n      );\n    }\n  }\n\n  const Reveal = ({ index, player }) => {\n    if ( player.status1 === Status.ST1.COMMITTED\n    && player.status2 === Status.ST2.NOT_REVEALED\n    && player.pl2status1 === Status.ST1.COMMITTED) {\n      return (\n        <PlayerForm \n          index={index} \n          type={'reveal'}\n          player={player}/> \n      );\n    }\n    else if (player.pl2status1 === Status.ST1.NOT_COMMITTED) {\n      return (\n        <CardText>{Status.ST2.PENDING}</CardText> \n      );\n    }\n    else {\n      return (\n        <CardText>{player.status2}</CardText> \n      );\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader tag=\"h4\">{props.name}</CardHeader>\n      <div>\n        <CardHeader tag=\"h6\">Phase 1: Commit</CardHeader>\n        <CardBody>\n          <Commit \n            index={props.index} \n            player={props.player} />\n        </CardBody>\n      </div>\n      <div>\n        <CardHeader tag=\"h6\">Phase 2: Reveal</CardHeader>\n        <CardBody>\n          <Reveal\n            index={props.index} \n            player={props.player} />\n        </CardBody>\n      </div>\n      <CardFooter className=\"text-muted\">\n        <ShowAction player={props.player} />\n      </CardFooter>\n    </Card>\n  );\n\n};\n\nexport default Player;","// configuration of web3\nimport Web3 from 'web3';\n\n// hijacking the provider from metamask instance of web3\n// this provider has been configured to access the Rinkeby network but also has access to my accounts\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;","import web3 from '../web3/web3';\n\nexport const rockpsAddress = '0x66b28635864496703b520d4a67c3f40a04720114';\nexport const rockpsInterface = [\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"latestWinner\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"reward\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"commit\",\n\t\t\t\t\"type\": \"bytes32\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"enterCommitment\",\n\t\t\"outputs\": [],\n\t\t\"payable\": true,\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"gameCount\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint8\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [],\n\t\t\"name\": \"finaliseGame\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"getPlayers\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address[]\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"choice\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"nounce\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"reveal\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"getRevealed\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool[2]\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"choice\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"nounce\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getKeccack0\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bytes32\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"pure\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [],\n\t\t\"name\": \"resetGame\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"getPlayerCount\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"candidate\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"notAlreadyIn\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"requiredValue\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t}\n];\n\nexport default new web3.eth.Contract(rockpsInterface, rockpsAddress);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../redux/actionTypes';\nimport * as Status from '../redux/status';\nimport { Button } from 'reactstrap';\nimport { rockpsAddress } from '../contracts/rockps';\n\nconst mapStateToProps = state => {\n  return {\n    status: state.gameStatus.status,\n    gameIsLoading: state.gameStatus.gameIsLoading,\n    gameErrMsg: state.gameStatus.gameErrMsg,\n    players: state.players.players,\n    playersIsLoading: state.players.playersIsLoading,\n    playersErrMsg: state.players.playersErrMsg\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    finaliseGame: () => dispatch({ type: ActionTypes.FINALISE_GAME_REQUEST }),\n    resetGame: () => dispatch({ type: ActionTypes.RESET_GAME_REQUEST }),\n    fetchGameStatus: () => dispatch({ type: ActionTypes.FETCH_STATUS_REQUEST })\n  };\n};\n\nclass GameStatus extends Component {\n\n  componentDidMount() { this.props.fetchGameStatus(); }\n  handleFinalSubmit = () => this.props.finaliseGame();\n  handleReset = () => this.props.resetGame();\n\n  render() {\n\n    const Finalise = () => {\n      if (this.props.players[0].status2 === Status.ST2.REVEALED\n        && this.props.players[1].status2 === Status.ST2.REVEALED) {\n        return (\n          <p className=\"lead\">\n            <Button color=\"primary\" onClick={() => this.handleFinalSubmit()}>Check winner</Button> </p>\n        );\n      }\n      else { return( <div /> )}\n    };\n\n    const Reset = () => {\n      return (\n        <p className=\"lead\">\n          <Button color=\"primary\" onClick={() => this.handleReset()}>Reset Game</Button> </p>\n      );\n    };\n\n    const Controls = () => {\n      if (this.props.playersIsLoading) {\n        return ( <p className=\"action\">Loading players status...</p> );\n      }\n      else if (this.props.status.act !== Status.ACT.NONE) {\n        return( <p className=\"action\">{this.props.status.act}</p> );\n      }\n      else {\n        return ( <div> <Finalise /> <Reset /> </div> );\n      }\n    }\n    \n    if (this.props.gameIsLoading) {\n      return (\n        <div>\n          <div>\n            <h4>Game status</h4>\n            <p className=\"action\">Loading game status...</p>\n          </div>\n          <hr className=\"my-2\" />\n        </div>\n      );\n    }\n    \n    else if (this.props.gameErrMsg) {\n      return (\n        <div>\n          <div>\n            <h4>Game status</h4>\n            <p className=\"action\">{this.props.gameErrMsg}</p>\n            <p className=\"action\">Reload this page to get latest status and try again...</p>\n          </div>\n          <hr className=\"my-2\" />\n        </div>\n      );\n    }\n    \n    else if (this.props.playersErrMsg) {\n      return ( <div> <p className=\"action\">Error...</p> </div> );\n    }\n\n    else {\n      return(\n        <div>\n          <div>\n            <h4>Game status</h4>\n            <p>Contract deployed on Rinkeby at: {rockpsAddress}</p>\n            <p>Last game winner: {this.props.status.last}</p>\n            <p>Currently {this.props.status.playerCount} players have committed their choice.</p>\n            <Controls />\n          </div>\n          <hr className=\"my-2\" />\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameStatus);","import React from 'react';\nimport { Jumbotron } from 'reactstrap';\nimport GameStatus from './GameStatusComponent';\n\nconst Header = () => {\n  return(\n    <Jumbotron>\n      <Intro />\n      <GameStatus />\n      <Instructions />\n    </Jumbotron>\n  );\n}\n\nconst Intro = () => {\n  return (\n    <div>\n      <h1 className=\"display-3\">Rock Paper Scissor</h1>\n      <hr className=\"my-2\" />\n    </div>\n  );\n}\n\nconst Instructions = () => {\n  return (\n    <div>\n      <h4>Instructions</h4>\n      <p>Have Metamask installed (change account for each player)</p>\n      <p>1) Commit 2) Reveal 3) Finish</p>\n    </div>\n  );\n}\n\nexport default Header;","import React from 'react';\n\nexport const Loading = () => {\n  return (\n    <div className=\"col-12\">\n      <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\">\n      </span>\n      <p className=\"action\">Loading . . .</p>\n    </div>\n  );\n};","import React, { Component } from 'react';\nimport Player from './PlayerComponent.js';\nimport Header from './HeaderComponent';\nimport * as ActionTypes from '../redux/actionTypes';\nimport { connect } from 'react-redux';\nimport { Loading } from './LoadingComponent';\n\nconst mapStateToProps = state => {\n  return { \n    players: state.players.players,\n    playersIsLoading: state.players.playersIsLoading,\n    playersErrMsg: state.players.playersErrMsg \n  };\n}\n\nconst mapDispactchToProps = dispatch => {\n  return {\n    fetchPlayers: () => dispatch({ type: ActionTypes.FETCH_PLAYERS_REQUEST })\n  };\n}\n\nclass Main extends Component {\n\n  componentDidMount() {\n    this.props.fetchPlayers();\n  }\n\n  render() {\n\n    const Players = () => {\n\n      if (this.props.playersIsLoading) {\n        return (\n          <div className=\"container\">\n            <div className=\"row\">\n              <Loading />\n            </div>\n          </div>\n        );\n      }\n    \n      else if (this.props.playersErrMsg) {\n        return (\n          <div className=\"container\">\n            <div className=\"row\">\n              <h4 className=\"action\">{this.props.playersErrMsg}</h4>\n              <p>Refresh this page to load latest game status from Rinkeby and try again</p>\n            </div>\n          </div>\n        );\n      }\n\n      else {\n        return (\n          <div className=\"row justify-content-center\">\n            <div className=\"col-10 col-md-5 m-auto\">\n              <Player name='Alice' index={0} player={this.props.players[0]} />\n            </div>\n            <div className=\"col-10 col-md-5 m-auto\">\n              <Player name='Bob' index={1} player={this.props.players[1]} />\n            </div>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <div className=\"container\">\n        <Header />\n        <Players />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispactchToProps)(Main);\n","import rockps from '../contracts/rockps';\nimport web3 from './web3';\nimport * as Status from '../redux/status';\n\nexport const fetchPlayers = async () => {\n  const playerCount = parseInt(await rockps.methods.getPlayerCount().call());\n  const playerAddr = await rockps.methods.getPlayers().call();\n\n  const players = [];\n  switch(playerCount) {\n    case 0:\n      players.push({ \n        addr: Status.NA, // player's address\n        status1: Status.ST1.NOT_COMMITTED, // player's commit status\n        pl2status1: Status.ST1.NOT_COMMITTED, // other player's reveal status\n        status2: Status.ST2.NOT_REVEALED, // player's reveal status\n        act: Status.ACT.NONE // player's ongoing actions\n      });\n      players.push({ addr: Status.NA, status1: Status.ST1.NOT_COMMITTED, pl2status1: Status.ST1.NOT_COMMITTED, status2: Status.ST2.NOT_REVEALED, act: Status.ACT.NONE });\n      break;\n    case 1:\n      players.push({ addr: playerAddr[0], status1: Status.ST1.COMMITTED, pl2status1: Status.ST1.NOT_COMMITTED, status2: Status.ST2.NOT_REVEALED, act: Status.ACT.NONE });\n      players.push({ addr: Status.NA, status1: Status.ST1.NOT_COMMITTED, pl2status1: Status.ST1.COMMITTED, status2: Status.ST2.NOT_REVEALED, act: Status.ACT.NONE });\n      break;\n    case 2:\n      const hasRevealed = await rockps.methods.getRevealed().call();\n      if (hasRevealed[0] && hasRevealed[1]) {\n        players.push({ addr: playerAddr[0], status1: Status.ST1.COMMITTED, pl2status1: Status.ST1.COMMITTED, status2: Status.ST2.REVEALED, act: Status.ACT.NONE });\n        players.push({ addr: playerAddr[1], status1: Status.ST1.COMMITTED, pl2status1: Status.ST1.COMMITTED, status2: Status.ST2.REVEALED, act: Status.ACT.NONE });\n      }\n      else if (!hasRevealed[0] && !hasRevealed[1]) {\n        players.push({ addr: playerAddr[0], status1: Status.ST1.COMMITTED, pl2status1: Status.ST1.COMMITTED, status2: Status.ST2.NOT_REVEALED, act: Status.ACT.NONE });\n        players.push({ addr: playerAddr[1], status1: Status.ST1.COMMITTED, pl2status1: Status.ST1.COMMITTED, status2: Status.ST2.NOT_REVEALED, act: Status.ACT.NONE });\n      }\n      else {\n        if (hasRevealed[0]) {\n          players.push({ addr: playerAddr[0], status1: Status.ST1.COMMITTED, pl2status1: Status.ST1.COMMITTED, status2: Status.ST2.REVEALED, act: Status.ACT.NONE});\n          players.push({ addr: playerAddr[1], status1: Status.ST1.COMMITTED, pl2status1: Status.ST1.COMMITTED, status2: Status.ST2.NOT_REVEALED, act: Status.ACT.NONE });\n        }\n        else {\n          players.push({ addr: playerAddr[0], status1: Status.ST1.COMMITTED, pl2status1: Status.ST1.COMMITTED, status2: Status.ST2.NOT_REVEALED, act: Status.ACT.NONE });\n          players.push({ addr: playerAddr[1], status1: Status.ST1.COMMITTED, pl2status1: Status.ST1.COMMITTED, status2: Status.ST2.REVEALED, act: Status.ACT.NONE });\n        }\n      }\n      break;\n    default:\n  };\n  return(players);\n};\n\nexport const submitCommit = async (payload) => {\n  const accounts = await web3.eth.getAccounts();\n  const choice = payload.choice;\n  const nounce = payload.nounce;\n\n  const commit = web3.utils.soliditySha3(choice, nounce);\n  // TODO: add address in the commit?\n  console.log(\"choice: \", choice, \" nounce: \", nounce);\n  await rockps.methods.enterCommitment(commit).send({ \n    from: accounts[0],\n    value: 1000 \n  });\n  \n  return accounts[0];\n};\n\nexport const revealCommit = async (payload) => {\n  const accounts = await web3.eth.getAccounts();\n  const choice = payload.choice;\n  const nounce = payload.nounce;\n\n  await rockps.methods.reveal(choice,nounce).send({ from: accounts[0] });\n};\n\nexport const fetchStatus = async () => {\n    \n  const getLastest = await rockps.methods.latestWinner().call();\n  let gameCount = parseInt(await rockps.methods.gameCount().call());\n  let last = Status.WINNER.NOT_PLAYED;\n  if (gameCount !== 0) { \n    last = (getLastest === Status.WINNER.NEUTRAL) \n      ? Status.WINNER.DRAW\n      : getLastest;\n  };\n\n  const playerCount = parseInt(await rockps.methods.getPlayerCount().call());\n\n  let canBeFinalised = false;\n  const playerAddr = await rockps.methods.getPlayers().call();\n  if (playerAddr.length === 2) {\n    const hasRevealed = await rockps.methods.getRevealed().call();\n    if (hasRevealed[0] && hasRevealed[1]) {\n      canBeFinalised = true;\n    }\n  }\n\n  return({\n    canBeFinalised: canBeFinalised,\n    playerCount: playerCount,\n    last: last,\n    act: Status.ACT.NONE\n  });\n};\n\nexport const resetPlayers = () => {\n  return [\n    { addr: Status.NA, \n      status1: Status.ST1.NOT_COMMITTED, \n      pl2status1: Status.ST1.NOT_COMMITTED, \n      status2: Status.ST2.NOT_REVEALED, \n      act: Status.ACT.NONE },\n    { addr: Status.NA, \n      status1: Status.ST1.NOT_COMMITTED, \n      pl2status1: Status.ST1.NOT_COMMITTED, \n      status2: Status.ST2.NOT_REVEALED, \n      act: Status.ACT.NONE }\n  ];\n};\n\nexport const resetStatus = (last) => {\n  return ({\n    playerCount: 0,\n    canBeFinalised: Status.NO,\n    last: last,\n    act: Status.ACT.NONE\n  });\n};\n\nexport const canBeFinalised = () => {\n\n};\n\nexport const finaliseGame = async () => {\n  const accounts = await web3.eth.getAccounts();\n  await rockps.methods.finaliseGame().send({ from: accounts[0] });\n\n  const last = await rockps.methods.latestWinner().call();\n  return (last === Status.WINNER.NEUTRAL)\n    ? Status.WINNER.DRAW\n    : last;\n};\n\nexport const resetGame = async () => {\n  const accounts = await web3.eth.getAccounts();\n  await rockps.methods.resetGame().send({ from: accounts[0] });\n};","import * as ActionTypes from './actionTypes';\nimport { call, put, takeEvery, all } from 'redux-saga/effects';\nimport * as utils from '../web3/utils';\nimport * as Status from '../redux/status';\n\n/* --------------- FINALISE_GAME --------------- */\n\nfunction* watchFinaliseGame() {\n  yield takeEvery(ActionTypes.FINALISE_GAME_REQUEST, finaliseGame);\n};\n\nexport function* finaliseGame() {\n  try { \n    yield put({ \n      type: ActionTypes.UPDATE_STATUS_ACT, \n      payload: Status.ACT.FINAL\n    });\n    const last = yield call(utils.finaliseGame);\n    const status = utils.resetStatus(last);\n    yield put({ \n      type: ActionTypes.UPDATE_STATUS, \n      payload: status\n    });\n\n    const players = utils.resetPlayers();\n    yield put({ \n      type: ActionTypes.UPDATE_PLAYERS, \n      payload: players\n    });\n\n  } catch (error) {\n    yield put({ type: ActionTypes.STATUS_FAILED, payload: error.message });\n  }\n}\n\n/* --------------- RESET_GAME --------------- */\n\nfunction* watchResetGame() {\n  yield takeEvery(ActionTypes.RESET_GAME_REQUEST, resetGame);\n};\n\nexport function* resetGame() {\n  try {\n    yield put({ \n      type: ActionTypes.UPDATE_STATUS_ACT, \n      payload: Status.ACT.RESET\n    });\n    yield call(utils.resetGame);\n    const status = utils.resetStatus(Status.WINNER.RESET);\n    yield put({ \n      type: ActionTypes.UPDATE_STATUS, \n      payload: status\n    });\n    const players = utils.resetPlayers();\n    yield put({ \n      type: ActionTypes.UPDATE_PLAYERS, \n      payload: players\n    });  \n  } catch (error) {\n    yield put({ type: ActionTypes.STATUS_FAILED, payload: error.message });\n  }\n\n}\n\n/* --------------- REVEAL_COMMIT --------------- */\n\nfunction* watchRevealCommit() {\n  yield takeEvery(ActionTypes.REVEAL_COMMIT_REQUEST, revealCommit);\n}\n\nexport function* revealCommit(action) {\n  try {\n    yield put({ \n      type: ActionTypes.UPDATE_PLAYER_ACT, \n      payload: {\n        index: action.payload.index,\n        act: Status.ACT.SENDING\n      } \n    });\n    yield call(utils.revealCommit, action.payload);\n    const status = {\n      ...action.payload.player,\n      act: Status.ACT.SENT,\n      status2: Status.ST2.REVEALED\n    }\n    yield put({ \n      type: ActionTypes.UPDATE_PLAYER, \n      payload: {\n        index: action.payload.index,\n        status: status\n      } \n    });\n    // Below not good -- check out how to update canBeFinalised\n    const canBeFinalised = utils.canBeFinalised();\n    yield put({\n      type: ActionTypes.UPDATE_STATUS_FINALISED,\n      payload: canBeFinalised\n    });\n    \n  } catch(error) {\n    // TODO: divide the above on update status + update players => use existing actions in case of failure\n    yield put({ type: ActionTypes.REVEAL_COMMIT_FAILED, payload: error.message });\n  }\n}\n\n/* --------------- SUBMIT_COMMIT --------------- */\n\nfunction* watchSubmitCommit() {\n  yield takeEvery(ActionTypes.SUBMIT_COMMIT_REQUEST, submitCommit);\n}\n\nexport function* submitCommit(action) {\n  try {\n    yield put({ \n      type: ActionTypes.UPDATE_PLAYER_ACT, \n      payload: {\n        index: action.payload.index,\n        act: Status.ACT.SENDING\n      } \n    });\n    const addr = yield call(utils.submitCommit, action.payload);\n    const status = {\n      ...action.payload.player,\n      addr: addr,\n      act: Status.ACT.SENT,\n      status1: Status.ST1.COMMITTED\n    }\n    yield put({ \n      type: ActionTypes.UPDATE_PLAYER, \n      payload: {\n        index: action.payload.index,\n        status: status\n      } \n    });\n    const index2 = (action.payload.index===0) ? 1 : 0;\n    yield put({ \n      type: ActionTypes.UPDATE_PLAYER_PL2, \n      payload: {\n        index: index2,\n        status: Status.ST1.COMMITTED\n      } \n    });\n    yield put({ type: ActionTypes.UPDATE_STATUS_COUNT });\n  } catch (error) {\n    yield put({ type: ActionTypes.PLAYERS_FAILED, payload: error.message });\n  }\n\n}\n\n/* --------------- FETCH_PLAYER --------------- */\n\nfunction* watchFetchPlayers() {\n  yield takeEvery(ActionTypes.FETCH_PLAYERS_REQUEST, fetchPlayers);\n};\n\nexport function* fetchPlayers() {\n  try {\n    const players = yield call(utils.fetchPlayers);\n    yield put({ type: ActionTypes.UPDATE_PLAYERS, payload: players });\n  } catch (error) {\n    yield put({ type: ActionTypes.PLAYERS_FAILED, payload: error.message });\n  }\n\n}\n\n/* --------------- FETCH_GAME --------------- */\n\nfunction* watchFetchGameStatus() {\n  yield takeEvery(ActionTypes.FETCH_STATUS_REQUEST, fetchGameStatus);\n};\n\nexport function* fetchGameStatus() {\n  try {    \n    const gameStatus = yield call(utils.fetchStatus);\n    yield put({ type: ActionTypes.UPDATE_STATUS, payload: gameStatus });\n  } catch (error) {\n    yield put({ type: ActionTypes.STATUS_FAILED, payload: error.message });\n  }\n\n}\n\n/* --------------- SAGA ADMIN --------------- */\n\nexport function* rootSaga() {\n  yield all([\n    watchFinaliseGame(),\n    watchResetGame(),\n    watchFetchPlayers(),\n    watchFetchGameStatus(),\n    watchSubmitCommit(),\n    watchRevealCommit()\n  ]);\n};","import * as ActionTypes from './actionTypes';\n\nexport const GameStatus = (state = {\n  gameIsLoading: true,\n  gameErrMsg: null,\n  status: null\n}, action) => {\n  switch(action.type) {\n\n    case ActionTypes.FETCH_STATUS_REQUEST:\n      return {...state,\n        gameIsLoading: true, \n        gameErrMsg: null,\n        status: null\n      };\n\n    case ActionTypes.UPDATE_STATUS:\n      return {...state,\n        gameIsLoading: false,\n        gameErrMsg: null,\n        status: action.payload\n      };\n\n    case ActionTypes.STATUS_FAILED:\n      return {...state,\n        gameIsLoading: false,\n        gameErrMsg: action.payload,\n        status: null\n      };\n\n    case ActionTypes.UPDATE_STATUS_COUNT:\n      return {...state,\n        gameIsLoading: false,\n        gameErrMsg: null,\n        status: {...state.status,\n          playerCount: state.status.playerCount+1}\n      };\n\n    case ActionTypes.UPDATE_STATUS_FINALISED:\n      return {...state,\n        gameIsLoading: false,\n        gameErrMsg: null,\n        status: {...state.status,\n          canBeFinalised: action.payload}\n      };\n\n    case ActionTypes.UPDATE_STATUS_ACT:\n      return {...state,\n        gameIsLoading: false,\n        gameErrMsg: null,\n        status: {...state.status,\n          act: action.payload}\n      };\n\n    default:\n      return state;\n  }\n}","import * as ActionTypes from './actionTypes';\n\nexport const Players = (state = {\n  playersIsLoading: true,\n  playersErrMsg: null,\n  players: []\n}, action) => {\n  switch(action.type) {\n\n    case ActionTypes.FETCH_PLAYERS_REQUEST:\n      return {...state,\n        playersIsLoading: true, \n        playersErrMsg: null,\n        players: []\n      };\n\n    case ActionTypes.PLAYERS_FAILED:\n      return {...state,\n        playersIsLoading: false,\n        playersErrMsg: action.payload,\n        players: []\n      };\n\n    case ActionTypes.UPDATE_PLAYERS:\n      return {...state,\n        playersIsLoading: false,\n        playersErrMsg: null,\n        players: action.payload\n      };\n\n    case ActionTypes.UPDATE_PLAYER:\n      return {...state,\n        playersIsLoading: false,\n        playersErrMsg: null,\n        players: subPlayers(state.players, action)\n      };\n\n    case ActionTypes.UPDATE_PLAYER_ACT:\n      return {...state,\n        playersIsLoading: false,\n        playersErrMsg: null,\n        players: subPlayers(state.players, action)\n      };\n\n    case ActionTypes.UPDATE_PLAYER_ST1:\n      return {...state,\n        playersIsLoading: false,\n        playersErrMsg: null,\n        players: subPlayers(state.players, action)\n      };\n\n    case ActionTypes.UPDATE_PLAYER_ST2:\n      return {...state,\n        playersIsLoading: false,\n        playersErrMsg: null,\n        players: subPlayers(state.players, action)\n      };\n\n    case ActionTypes.UPDATE_PLAYER_ADDR:\n      return {...state,\n        playersIsLoading: false,\n        playersErrMsg: null,\n        players: subPlayers(state.players, action)\n      };\n\n    case ActionTypes.UPDATE_PLAYER_PL2:\n      return {...state,\n        playersIsLoading: false,\n        playersErrMsg: null,\n        players: subPlayers(state.players, action)\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst subPlayers = (state, action) => {\n  switch(action.type) {\n\n    case ActionTypes.UPDATE_PLAYER:\n      switch(action.payload.index) {\n        case 0:\n          return [action.payload.status, state[1]];\n        case 1:\n          return [state[0], action.payload.status];\n        default:\n          return state;\n      }\n\n    case ActionTypes.UPDATE_PLAYER_ACT:\n      switch(action.payload.index) {\n        case 0:\n          return [\n            {...state[0], act: action.payload.act }, \n            state[1] \n          ];\n        case 1:\n          return [ \n            state[0],\n            {...state[1], act: action.payload.act }, \n          ];\n        case 2:\n          return [ \n            {...state[0], act: action.payload.act },\n            {...state[1], act: action.payload.act }, \n          ];\n        default:\n          return state;\n      }\n    \n    case ActionTypes.UPDATE_PLAYER_ST1:\n      switch(action.payload.index) {\n        case 0:\n          return [\n            {...state[0], status1: action.payload.status1 }, \n            state[1] \n          ];\n        case 1:\n          return [ \n            state[0],\n            {...state[1], status1: action.payload.status1 }, \n          ];\n        default:\n          return state;\n      }\n  \n      case ActionTypes.UPDATE_PLAYER_ST2:\n        switch(action.payload.index) {\n          case 0:\n            return [\n              {...state[0], status2: action.payload.status2 }, \n              state[1] \n            ];\n          case 1:\n            return [ \n              state[0],\n              {...state[1], status2: action.payload.status2 }, \n            ];\n          default:\n            return state;\n        }\n  \n      case ActionTypes.UPDATE_PLAYER_ADDR:\n        switch(action.payload.index) {\n          case 0:\n            return [\n              {...state[0], addr: action.payload.addr }, \n              state[1] \n            ];\n          case 1:\n            return [ \n              state[0],\n              {...state[1], addr: action.payload.addr }, \n            ];\n          default:\n            return state;\n        }\n  \n      case ActionTypes.UPDATE_PLAYER_PL2:\n        switch(action.payload.index) {\n          case 0:\n            return [\n              {...state[0], pl2status1: action.payload.status }, \n              state[1] \n            ];\n          case 1:\n            return [ \n              state[0],\n              {...state[1], pl2status1: action.payload.status }, \n            ];\n          default:\n            return state;\n        }\n\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport { GameStatus } from './statusReducer';\nimport { Players } from './playersReducer';\n\nconst rootReducer = combineReducers({\n  gameStatus: GameStatus,\n  players: Players\n});\n\nexport default rootReducer;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Main from './components/MainComponent';\nimport { configureStore } from './redux/configureStore';\nimport { Provider } from 'react-redux';\nimport './App.css';\n\nconst store = configureStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Main />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n\nApp.propTypes = {\n  store: PropTypes.object,\n  history: PropTypes.object,\n  Main: PropTypes.element\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootSaga } from './actionCreators';\nimport rootReducer from './rootReducer';\nimport logger from 'redux-logger';\n\nexport const configureStore = () => {\n\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = createStore(\n    rootReducer, \n    compose(\n      applyMiddleware(\n        logger,\n        sagaMiddleware )\n    )\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}